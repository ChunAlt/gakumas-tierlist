{"ast":null,"code":"import _classCallCheck from\"C:/Users/Chun/GakuTest/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"C:/Users/Chun/GakuTest/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _assertThisInitialized from\"C:/Users/Chun/GakuTest/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";import _inherits from\"C:/Users/Chun/GakuTest/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"C:/Users/Chun/GakuTest/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React from'react';import SupportCard from'./SupportCard';import events from'../card-events';import{supportCardProperties}from'../constants';import Select from'react-select';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ordinal=[\"1st\",\"2nd\",\"3rd\",\"4th\",\"5th\",\"6th\",\"7th\"];var type_names=[\"Speed\",\"Stamina\",\"Power\",\"Guts\",\"Wisdom\",\"\",\"Friend\"];var TierList=/*#__PURE__*/function(_React$Component){_inherits(TierList,_React$Component);var _super=_createSuper(TierList);function TierList(props){var _this;_classCallCheck(this,TierList);_this=_super.call(this,props);_this.state={dropdownSelections:[\"none\",\"none\",\"none\"]};_this.onDropdown1Changed=_this.onDropdown1Changed.bind(_assertThisInitialized(_this));_this.onDropdown2Changed=_this.onDropdown2Changed.bind(_assertThisInitialized(_this));_this.onDropdown3Changed=_this.onDropdown3Changed.bind(_assertThisInitialized(_this));return _this;}//lmao\n_createClass(TierList,[{key:\"onDropdown1Changed\",value:function onDropdown1Changed(newValue){var newSelections=this.state.dropdownSelections.slice();newSelections[0]=newValue.value;console.log(newValue);this.setState({dropdownSelections:newSelections});}},{key:\"onDropdown2Changed\",value:function onDropdown2Changed(newValue){var newSelections=this.state.dropdownSelections.slice();newSelections[1]=newValue.value;this.setState({dropdownSelections:newSelections});}},{key:\"onDropdown3Changed\",value:function onDropdown3Changed(newValue){var newSelections=this.state.dropdownSelections.slice();newSelections[2]=newValue.value;this.setState({dropdownSelections:newSelections});}},{key:\"render\",value:function render(){var _this2=this;var cards=this.props.cards;var selectedNames=this.props.selectedCards.map(function(card){return card.char_name;});if(this.props.weights.type>-1){cards=cards.filter(function(e){return e.type===_this2.props.weights.type;});}var processedCards=processCards(cards,this.props.weights,this.props.selectedCards);if(processedCards.length===0){return/*#__PURE__*/_jsx(\"div\",{className:\"tier-list\"});}var rows=[[]];var current_row=0;var step=(processedCards[0].score-processedCards[processedCards.length-1].score)/7;var boundary=processedCards[0].score-step;var _loop=function _loop(i){while(processedCards[i].score<boundary-1){rows.push([]);current_row++;boundary-=step;}rows[current_row].push(/*#__PURE__*/_jsx(SupportCard,{id:processedCards[i].id,lb:processedCards[i].lb,score:processedCards[i].score,info:processedCards[i].info,charName:processedCards[i].char_name,selected:selectedNames,card:cards.find(function(c){return c.id===processedCards[i].id&&c.limit_break===processedCards[i].lb;}),onClick:function onClick(){return _this2.props.cardSelected(cards.find(function(c){return c.id===processedCards[i].id&&c.limit_break===processedCards[i].lb;}));},stats:_this2.state.dropdownSelections},processedCards[i].id+\"LB\"+processedCards[i].lb));};for(var i=0;i<processedCards.length;i++){_loop(i);}var tiers=[];for(var _i=0;_i<7;_i++){tiers.push(/*#__PURE__*/_jsxs(\"div\",{className:\"tier\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"tier-letter\",children:tierNames[_i]}),/*#__PURE__*/_jsx(\"div\",{className:\"tier-images\",children:rows[_i]})]},tierNames[_i]));}var count=this.props.selectedCards.filter(function(c){return c.type==_this2.props.weights.type;}).length;var dropdownOptions=[{value:\"none\",label:\"None\"}];var properties=Object.keys(supportCardProperties).sort();for(var _i2=0;_i2<properties.length;_i2++){dropdownOptions.push({value:properties[_i2],label:supportCardProperties[properties[_i2]].friendly_name});}return/*#__PURE__*/_jsxs(\"div\",{className:\"tier-list\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"selectors\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"selectLabel\",children:\"Show Stats:\"}),/*#__PURE__*/_jsx(Select,{className:\"select\",options:dropdownOptions,onChange:this.onDropdown1Changed,defaultValue:{value:\"none\",label:\"None\"}}),/*#__PURE__*/_jsx(Select,{className:\"select\",options:dropdownOptions,onChange:this.onDropdown2Changed,defaultValue:{value:\"none\",label:\"None\"}}),/*#__PURE__*/_jsx(Select,{className:\"select\",options:dropdownOptions,onChange:this.onDropdown3Changed,defaultValue:{value:\"none\",label:\"None\"}})]}),/*#__PURE__*/_jsxs(\"span\",{className:\"label\",children:[\"Ranking for the \",ordinal[count],\" \",type_names[this.props.weights.type],\" card in this deck:\"]}),tiers]});}}]);return TierList;}(React.Component);var tierNames=['S','A','B','C','D','E','F'];function processCards(cards,weights,selectedCards){var processedCards=[];selectedCards=selectedCards.slice();// Calculate some stuff here so we don't have to do it a million times later\nvar presentTypes=[false,false,false,false,false,false,false];var cardsPerType=[[],[],[],[],[],[],[]];for(var card=0;card<selectedCards.length;card++){var selectedCard=selectedCards[card];selectedCard.cardType=selectedCard.type;selectedCard.index=card;presentTypes[selectedCard.cardType]=true;cardsPerType[selectedCard.cardType].push(selectedCard);}for(var i=0;i<cards.length;i++){var info={};var _card=JSON.parse(JSON.stringify(cards[i]));var cardType=_card.type;_card.index=6;var presentTypesWithCard=presentTypes.slice();presentTypesWithCard[cardType]=true;// Add starting stats and stats from events\nvar score=0;var statGains=_card.start_b;info.spRate=_card.sp_r;info.spp=_card.spp;info.pb=_card.pb;if(_card.type==0){statGains+=_card.lb*weights.vocalLessons[1];}else if(_card.type==1){statGains+=_card.lb*weights.danceLessons[1];}else{statGains+=_card.lb*weights.visualLessons[1];}if(_card.type==0){statGains+=_card.sp_lb*weights.vocalLessons[2];}else if(_card.type==1){statGains+=_card.sp_lb*weights.danceLessons[2];}else{statGains+=_card.sp_lb*weights.visualLessons[2];}statGains+=_card.rest_b*weights.rest;statGains+=_card.gb*weights.gift;statGains+=_card.db*weights.date;statGains+=_card.sb*weights.shop;statGains+=_card.cb*weights.classroom;statGains+=_card.pdb*weights.drink;statGains+=_card.mb;statGains+=_card.ub*weights.upgrade.reduce(function(total,current){return total+current;},0);statGains+=_card.m_ub*weights.upgrade[1];statGains+=_card.a_cb*weights.cardAcq[0];statGains+=_card.m_cb*weights.cardAcq[1];statGains+=_card.con_cb*weights.cardAcq[2];statGains+=_card.remove_b*weights.removal;// Convert stat gains to score\nscore+=statGains;processedCards.push({id:_card.id,lb:_card.limit_break,score:score,info:info,char_name:_card.char_name});}processedCards.sort(function(a,b){return b.score-a.score;});return processedCards;}export default TierList;","map":{"version":3,"sources":["C:/Users/Chun/GakuTest/src/components/TierList.js"],"names":["React","SupportCard","events","supportCardProperties","Select","ordinal","type_names","TierList","props","state","dropdownSelections","onDropdown1Changed","bind","onDropdown2Changed","onDropdown3Changed","newValue","newSelections","slice","value","console","log","setState","cards","selectedNames","selectedCards","map","card","char_name","weights","type","filter","e","processedCards","processCards","length","rows","current_row","step","score","boundary","i","push","id","lb","info","find","c","limit_break","cardSelected","tiers","tierNames","count","dropdownOptions","label","properties","Object","keys","sort","friendly_name","Component","presentTypes","cardsPerType","selectedCard","cardType","index","JSON","parse","stringify","presentTypesWithCard","statGains","start_b","spRate","sp_r","spp","pb","vocalLessons","danceLessons","visualLessons","sp_lb","rest_b","rest","gb","gift","db","date","sb","shop","cb","classroom","pdb","drink","mb","ub","upgrade","reduce","total","current","m_ub","a_cb","cardAcq","m_cb","con_cb","remove_b","removal","a","b"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SupportCard from './SupportCard';\nimport events from '../card-events';\nimport { supportCardProperties } from '../constants';\nimport Select from 'react-select';\n\nconst ordinal = [\"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"7th\"];\nconst type_names = [\"Speed\", \"Stamina\", \"Power\", \"Guts\", \"Wisdom\", \"\", \"Friend\"];\n\nclass TierList extends React.Component {\n    constructor (props) {\n        super(props);\n\n        this.state = {\n            dropdownSelections: [\"none\",\"none\",\"none\"]\n        }\n\n        this.onDropdown1Changed = this.onDropdown1Changed.bind(this);\n        this.onDropdown2Changed = this.onDropdown2Changed.bind(this);\n        this.onDropdown3Changed = this.onDropdown3Changed.bind(this);\n    }\n\n    //lmao\n    onDropdown1Changed(newValue) {\n        let newSelections = this.state.dropdownSelections.slice();\n        newSelections[0] = newValue.value;\n        console.log(newValue);\n        this.setState({dropdownSelections:newSelections});\n    }\n    onDropdown2Changed(newValue) {\n        let newSelections = this.state.dropdownSelections.slice();\n        newSelections[1] = newValue.value;\n        this.setState({dropdownSelections:newSelections});\n    }\n    onDropdown3Changed(newValue) {\n        let newSelections = this.state.dropdownSelections.slice();\n        newSelections[2] = newValue.value;\n        this.setState({dropdownSelections:newSelections});\n    }\n\n    render() {\n        let cards = this.props.cards;\n        let selectedNames = this.props.selectedCards.map(card => card.char_name);\n\n        \n        if(this.props.weights.type > -1) {\n            cards = cards.filter(e => e.type === this.props.weights.type);\n        }\n        \n\n        let processedCards = processCards(cards, this.props.weights, this.props.selectedCards);\n    \n        if (processedCards.length === 0) {\n            return <div className=\"tier-list\"></div>;\n        }\n    \n        let rows = [[]];\n        let current_row = 0;\n        let step = (processedCards[0].score - processedCards[processedCards.length - 1].score) / 7;\n        let boundary = processedCards[0].score - step;\n    \n        for (let i = 0; i < processedCards.length; i++) {\n            while (processedCards[i].score < boundary - 1) {\n                rows.push([]);\n                current_row++;\n                boundary -= step;\n            }\n    \n            rows[current_row].push((\n                <SupportCard\n                    id={processedCards[i].id}\n                    lb={processedCards[i].lb}\n                    score={processedCards[i].score}\n                    key={processedCards[i].id + \"LB\" + processedCards[i].lb}\n                    info={processedCards[i].info}\n                    charName={processedCards[i].char_name}\n                    selected={selectedNames}\n                    card={cards.find((c) => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb)}\n                    onClick={() => this.props.cardSelected(cards.find((c) => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb))}\n                    stats={this.state.dropdownSelections}\n                />\n            ));\n        }\n    \n        let tiers = [];\n    \n        for (let i = 0; i < 7; i++) {\n            tiers.push(\n                <div className=\"tier\" key={tierNames[i]}>\n                    <div className=\"tier-letter\">{tierNames[i]}</div>\n                    <div className=\"tier-images\">{rows[i]}</div>\n                </div>\n            )\n        }\n    \n        let count = this.props.selectedCards.filter((c) => c.type == this.props.weights.type).length;\n        let dropdownOptions = [{value:\"none\", label:\"None\"}];\n        let properties = Object.keys(supportCardProperties).sort();\n        for (let i = 0; i < properties.length; i++) {\n            dropdownOptions.push({\n                value:properties[i],\n                label:supportCardProperties[properties[i]].friendly_name\n            });\n        }\n    \n        return (\n            <div className=\"tier-list\">\n                <div className=\"selectors\">\n                    <span className=\"selectLabel\">Show Stats:</span>\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown1Changed} defaultValue={{value:\"none\", label:\"None\"}}/>\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown2Changed} defaultValue={{value:\"none\", label:\"None\"}}/>\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown3Changed} defaultValue={{value:\"none\", label:\"None\"}}/>\n                </div>\n                <span className=\"label\">Ranking for the {ordinal[count]} {type_names[this.props.weights.type]} card in this deck:</span>\n                {tiers}\n            </div>\n        );\n    }\n}\n\nconst tierNames = ['S', 'A', 'B', 'C', 'D', 'E', 'F']\nfunction processCards(cards, weights, selectedCards) {\n    let processedCards = [];\n    selectedCards = selectedCards.slice();\n    \n    // Calculate some stuff here so we don't have to do it a million times later\n    let presentTypes = [false,false,false,false,false,false,false];\n    let cardsPerType = [[],[],[],[],[],[],[]];\n\n    for (let card = 0; card < selectedCards.length; card++) {\n        let selectedCard = selectedCards[card];\n        selectedCard.cardType = selectedCard.type;\n        selectedCard.index = card;\n        presentTypes[selectedCard.cardType] = true;\n        cardsPerType[selectedCard.cardType].push(selectedCard);\n    }\n\n    for (let i = 0; i < cards.length; i++) {\n        let info = {};\n        let card = JSON.parse(JSON.stringify(cards[i]));\n        let cardType = card.type;\n        card.index = 6;\n        let presentTypesWithCard = presentTypes.slice();\n        presentTypesWithCard[cardType] = true;\n\n        // Add starting stats and stats from events\n        let score = 0;\n        let statGains = card.start_b;\n\n        info.spRate = card.sp_r;\n        info.spp = card.spp;\n        info.pb = card.pb;\n\n        if (card.type == 0) {\n            statGains += card.lb * weights.vocalLessons[1];\n        } else if (card.type == 1) {\n            statGains += card.lb * weights.danceLessons[1];\r\n        } else {\n            statGains += card.lb * weights.visualLessons[1];\r\n        }\n\n        if (card.type == 0) {\n            statGains += card.sp_lb * weights.vocalLessons[2];\n        } else if (card.type == 1) {\n            statGains += card.sp_lb * weights.danceLessons[2];\r\n        } else {\n            statGains += card.sp_lb * weights.visualLessons[2];\r\n        }\n\n        statGains += card.rest_b * weights.rest;\n        statGains += card.gb * weights.gift;\n        statGains += card.db * weights.date;\n        statGains += card.sb * weights.shop;\n        statGains += card.cb * weights.classroom;\n        statGains += card.pdb * weights.drink;\n        statGains += card.mb\n\n        statGains += card.ub * weights.upgrade.reduce((total, current) => total + current, 0);\n        statGains += card.m_ub * weights.upgrade[1];\n\n        statGains += card.a_cb * weights.cardAcq[0];\n        statGains += card.m_cb * weights.cardAcq[1];\n        statGains += card.con_cb * weights.cardAcq[2];\n\n        statGains += card.remove_b * weights.removal;\n\n\n        // Convert stat gains to score\n        score += statGains\n\n        processedCards.push({\n            id: card.id,\n            lb: card.limit_break,\n            score: score,\n            info: info,\n            char_name: card.char_name\n        })\n    }\n\n    processedCards.sort((a, b) => b.score - a.score);\n    return processedCards;\n}\n\nexport default TierList;\n"]},"metadata":{},"sourceType":"module"}