{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Chun\\\\GakuTest\\\\src\\\\components\\\\TierList.js\";\nimport React from 'react';\nimport SupportCard from './SupportCard';\nimport events from '../card-events';\nimport { supportCardProperties } from '../constants';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ordinal = [\"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"7th\"];\nconst type_names = [\"Speed\", \"Stamina\", \"Power\", \"Guts\", \"Wisdom\", \"\", \"Friend\"];\n\nclass TierList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropdownSelections: [\"none\", \"none\", \"none\"]\n    };\n    this.onDropdown1Changed = this.onDropdown1Changed.bind(this);\n    this.onDropdown2Changed = this.onDropdown2Changed.bind(this);\n    this.onDropdown3Changed = this.onDropdown3Changed.bind(this);\n  } //lmao\n\n\n  onDropdown1Changed(newValue) {\n    let newSelections = this.state.dropdownSelections.slice();\n    newSelections[0] = newValue.value;\n    console.log(newValue);\n    this.setState({\n      dropdownSelections: newSelections\n    });\n  }\n\n  onDropdown2Changed(newValue) {\n    let newSelections = this.state.dropdownSelections.slice();\n    newSelections[1] = newValue.value;\n    this.setState({\n      dropdownSelections: newSelections\n    });\n  }\n\n  onDropdown3Changed(newValue) {\n    let newSelections = this.state.dropdownSelections.slice();\n    newSelections[2] = newValue.value;\n    this.setState({\n      dropdownSelections: newSelections\n    });\n  }\n\n  render() {\n    let cards = this.props.cards;\n    let selectedNames = this.props.selectedCards.map(card => card.char_name);\n\n    if (this.props.weights.type > -1) {\n      cards = cards.filter(e => e.type === this.props.weights.type);\n    }\n\n    let processedCards = processCards(cards, this.props.weights, this.props.selectedCards);\n\n    if (processedCards.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tier-list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 20\n      }, this);\n    }\n\n    let rows = [[]];\n    let current_row = 0;\n    let step = (processedCards[0].score - processedCards[processedCards.length - 1].score) / 7;\n    let boundary = processedCards[0].score - step;\n\n    for (let i = 0; i < processedCards.length; i++) {\n      while (processedCards[i].score < boundary - 1) {\n        rows.push([]);\n        current_row++;\n        boundary -= step;\n      }\n\n      rows[current_row].push( /*#__PURE__*/_jsxDEV(SupportCard, {\n        id: processedCards[i].id,\n        lb: processedCards[i].lb,\n        score: processedCards[i].score,\n        info: processedCards[i].info,\n        charName: processedCards[i].char_name,\n        selected: selectedNames,\n        card: cards.find(c => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb),\n        onClick: () => this.props.cardSelected(cards.find(c => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb)),\n        stats: this.state.dropdownSelections\n      }, processedCards[i].id + \"LB\" + processedCards[i].lb, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this));\n    }\n\n    let tiers = [];\n\n    for (let i = 0; i < 7; i++) {\n      tiers.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tier\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tier-letter\",\n          children: tierNames[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tier-images\",\n          children: rows[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)]\n      }, tierNames[i], true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this));\n    }\n\n    let count = this.props.selectedCards.filter(c => c.type == this.props.weights.type).length;\n    let dropdownOptions = [{\n      value: \"none\",\n      label: \"None\"\n    }];\n    let properties = Object.keys(supportCardProperties).sort();\n\n    for (let i = 0; i < properties.length; i++) {\n      dropdownOptions.push({\n        value: properties[i],\n        label: supportCardProperties[properties[i]].friendly_name\n      });\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tier-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selectors\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"selectLabel\",\n          children: \"Show Stats:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          className: \"select\",\n          options: dropdownOptions,\n          onChange: this.onDropdown1Changed,\n          defaultValue: {\n            value: \"none\",\n            label: \"None\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          className: \"select\",\n          options: dropdownOptions,\n          onChange: this.onDropdown2Changed,\n          defaultValue: {\n            value: \"none\",\n            label: \"None\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          className: \"select\",\n          options: dropdownOptions,\n          onChange: this.onDropdown3Changed,\n          defaultValue: {\n            value: \"none\",\n            label: \"None\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"label\",\n        children: [\"Ranking for the \", ordinal[count], \" \", type_names[this.props.weights.type], \" card in this deck:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), tiers]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst tierNames = ['S', 'A', 'B', 'C', 'D', 'E', 'F'];\nconst raceRewards = [[2, 2, 2, 2, 2, 35], [1.6, 1.6, 1.6, 1.6, 1.6, 25], [1, 1, 1, 1, 1, 20], [13.5, 13.5, 13.5, 13.5, 13.5, 50]];\n\nfunction processCards(cards, weights, selectedCards) {\n  let processedCards = [];\n  selectedCards = selectedCards.slice(); // Calculate some stuff here so we don't have to do it a million times later\n\n  let presentTypes = [false, false, false, false, false, false, false];\n  let cardsPerType = [[], [], [], [], [], [], []];\n  let baseBondNeeded = 0;\n\n  for (let card = 0; card < selectedCards.length; card++) {\n    let selectedCard = selectedCards[card]; //let cardSpecialty = (100 + selectedCard.specialty_rate + weights.bonusSpec) * selectedCard.unique_specialty * selectedCard.fs_specialty;\n\n    let cardSpecialty = 50;\n    let cardSpecialtyPercent = cardSpecialty / (450 + cardSpecialty);\n    selectedCard.rainbowSpecialty = cardSpecialtyPercent;\n    selectedCard.offSpecialty = 100 / (450 + cardSpecialty);\n    selectedCard.cardType = selectedCard.type;\n    selectedCard.index = card;\n    presentTypes[selectedCard.cardType] = true;\n    cardsPerType[selectedCard.cardType].push(selectedCard);\n\n    if (selectedCard.cardType == 6) {\n      baseBondNeeded += 55 - 0;\n    } else {\n      baseBondNeeded += 75 - 0;\n    }\n    /*\n    if (events[selectedCard.id]) {\n        baseBondNeeded -= events[selectedCard.id][7];\n    }\n    */\n\n  }\n\n  let preferredRainbowChances = [0, 0, 0, 0, 0];\n  /*\n  for (let i = 0; i < 5; i++) {\n      if (i != weights.type) {\n          if(cardsPerType[i].length > 0) {\n              let minimum = 1;\n              if (weights.prioritize) {\n                  minimum = 2;\n              }\n              let combos = GetCombinations(cardsPerType[i], minimum);\n              if (combos.length > 0) {\n                  preferredRainbowChances[i] = combos.reduce((current, combo) => {\n                      return current += CalculateCombinationChance(combo, undefined, i);\n                  }, 0);\n              }\n          }\n      }\n  }\n  */\n\n  let chanceOfPreferredRainbow = 1 - preferredRainbowChances.reduce((current, chance) => {\n    return current * (1 - chance);\n  }, 1);\n\n  for (let i = 0; i < cards.length; i++) {\n    let info = {};\n    let card = JSON.parse(JSON.stringify(cards[i]));\n    let cardType = card.type;\n    card.index = 6;\n    let bondNeeded = baseBondNeeded;\n\n    if (cardType == 6) {\n      bondNeeded += 55 - 0;\n    } else {\n      bondNeeded += 75 - 0;\n    }\n\n    let presentTypesWithCard = presentTypes.slice();\n    presentTypesWithCard[cardType] = true;\n    let typeCount = presentTypesWithCard.filter(Boolean).length; // Add starting stats and stats from events\n\n    let score = 0;\n    let energyGain = 0;\n    let statGains = card.starting_stats.slice();\n    statGains.push(0);\n    info.starting_stats = card.starting_stats.slice();\n    info.event_stats = [0, 0, 0, 0, 0, 0, 0];\n    /*\n    if (events[card.id]) {\n        info.event_stats = events[card.id].slice();\n        for (let stat = 0; stat < 6; stat++) {\n            statGains[stat] += events[card.id][stat] * card.effect_size_up;\n            info.event_stats[stat] = events[card.id][stat] * card.effect_size_up;\n        }\n        energyGain += events[card.id][6] * card.energy_up;\n        bondNeeded -= events[card.id][7];\n        score += events[card.id][7];\n    } else {\n        // Dummy event values for cards we don't yet know the events for\n        if (card.rarity === 2) {\n            // 35 total\n            for (let stat = 0; stat < 5; stat++) {\n                statGains[stat] += 7;\n            }\n            bondNeeded -= 5;\n        } else if (card.rarity === 3) {\n            // 45 total\n            for (let stat = 0; stat < 5; stat++) {\n                statGains[stat] += 9;\n            }\n            bondNeeded -= 5;\n        }\n        score += 5;\n    }\n    \n    if (card.type_stats > 0) {\n        statGains[card.type] += card.type_stats;\n        for (let sc = 0; sc < selectedCards.length; sc++) {\n            if(selectedCards[sc].type < 6) {\n                statGains[selectedCards[sc].type] += card.type_stats;\n            } else {\n                statGains[0] += card.type_stats / 5;\n                statGains[1] += card.type_stats / 5;\n                statGains[2] += card.type_stats / 5;\n                statGains[3] += card.type_stats / 5;\n                statGains[4] += card.type_stats / 5;\n            }\n        }\n    }\n    */\n\n    let trainingDays = 65 - weights.races[0] - weights.races[1] - weights.races[2];\n    if (cardType === 6) trainingDays -= 5;\n    let daysToBond = bondNeeded / weights.bondPerDay;\n    let rainbowDays = trainingDays - daysToBond;\n    let specialty = (100 + 0 + weights.bonusSpec) * 1 * 1;\n    let specialtyPercent = specialty / (450 + specialty);\n    let otherPercent = 100 / (450 + specialty);\n    let offstatAppearanceDenominator = 4;\n    let daysPerTraining = [0, 0, 0, 0, 0];\n    let bondedDaysPerTraining = [0, 0, 0, 0, 0];\n    let rainbowTraining = 0;\n    let rainbowOverride = 1;\n\n    if (cardType != 6) {\n      let chanceOfSingleRainbow = 0;\n      let cardsOfThisType = cardsPerType[cardType].slice();\n      card.rainbowSpecialty = specialtyPercent;\n      card.offSpecialty = otherPercent;\n      cardsOfThisType.push(card);\n\n      for (let j = 0; j < cardsOfThisType.length; j++) {\n        console.log(cardsOfThisType);\n        chanceOfSingleRainbow += CalculateCombinationChance([cardsOfThisType[j]], cardsOfThisType, cardType);\n      }\n\n      rainbowOverride = 1 - chanceOfPreferredRainbow * chanceOfSingleRainbow;\n    } // Calculate appearance rates on each training\n\n\n    for (let stat = 0; stat < 5; stat++) {\n      if (stat == cardType) {\n        rainbowTraining = specialtyPercent * rainbowDays * rainbowOverride;\n        daysPerTraining[stat] = specialtyPercent * daysToBond;\n      } else {\n        daysPerTraining[stat] = otherPercent / offstatAppearanceDenominator * daysToBond;\n        bondedDaysPerTraining[stat] = otherPercent / offstatAppearanceDenominator * rainbowDays;\n      }\n    }\n\n    if (weights.onlySummer) {\n      rainbowTraining = 8 * specialtyPercent * rainbowOverride;\n    }\n\n    if (0) {\n      let current_bonus = 0;\n      let total = 0;\n\n      for (let j = rainbowTraining * 0.66; j > 0; j--) {\n        total += current_bonus;\n        current_bonus = 0;\n      }\n\n      card.unique_fs_bonus = 1 + total / rainbowTraining / 100;\n    } // Stats from cross-training\n\n\n    info.non_rainbow_gains = [0, 0, 0, 0, 0, 0, 0];\n\n    for (let training = 0; training < 5; training++) {\n      let gains = weights.unbondedTrainingGain[training];\n      let daysOnThisTraining = daysPerTraining[training];\n      energyGain += daysOnThisTraining * gains[6] * 0;\n      let trainingGains = CalculateCrossTrainingGain(gains, weights, card, selectedCards, training, daysOnThisTraining, typeCount, false);\n\n      for (let stat = 0; stat < 6; stat++) {\n        statGains[stat] += trainingGains[stat];\n        info.non_rainbow_gains[stat] += trainingGains[stat];\n      }\n\n      info.non_rainbow_gains[6] += daysOnThisTraining * gains[6] * 0;\n    } // Stats from cross-training while bonded\n\n\n    for (let training = 0; training < 5; training++) {\n      let gains = weights.bondedTrainingGain[training];\n      let daysOnThisTraining = bondedDaysPerTraining[training];\n      energyGain += daysOnThisTraining * gains[6] * 0;\n      energyGain += daysOnThisTraining * gains[6] * 0;\n      let trainingGains = CalculateCrossTrainingGain(gains, weights, card, selectedCards, training, daysOnThisTraining, typeCount, true);\n\n      for (let stat = 0; stat < 6; stat++) {\n        statGains[stat] += trainingGains[stat];\n        info.non_rainbow_gains[stat] += trainingGains[stat];\n      }\n\n      info.non_rainbow_gains[6] += daysOnThisTraining * gains[6] * 0;\n      info.non_rainbow_gains[6] += daysOnThisTraining * gains[6] * 0;\n\n      if (training == 4 && card.group) {\n        energyGain += daysOnThisTraining * 1 / 5;\n      }\n    }\n\n    info.rainbow_gains = [0, 0, 0, 0, 0, 0, 0]; // Stats from rainbows\n\n    if (cardType < 6) {\n      energyGain += rainbowTraining * 0;\n      let specialtyGains = weights.bondedTrainingGain[cardType];\n\n      if (weights.onlySummer) {\n        specialtyGains = weights.summerTrainingGain[cardType];\n      }\n\n      let trainingGains = CalculateTrainingGain(specialtyGains, weights, card, selectedCards, cardType, rainbowTraining, true, typeCount);\n      info.rainbow_gains = trainingGains.slice();\n      info.rainbow_gains.push(rainbowTraining * 0);\n\n      for (let stat = 0; stat < 6; stat++) {\n        statGains[stat] += trainingGains[stat];\n      }\n    }\n\n    info.race_bonus_gains = 0; // Race bonus\n\n    for (let raceType = 0; raceType < 4; raceType++) {\n      for (let stat = 0; stat < 6; stat++) {\n        statGains[stat] += raceRewards[raceType][stat] * (0 / 100) * weights.races[raceType];\n        info.race_bonus_gains += raceRewards[raceType][stat] * (0 / 100) * weights.races[raceType];\n      }\n    } // Convert stat gains to score\n\n\n    score += GainsToScore(statGains, weights);\n    score += energyGain * weights.stats[6];\n\n    if (weights.scenarioLink.indexOf(card.char_name) > -1) {\n      score += weights.scenarioBonus;\n    }\n\n    processedCards.push({\n      id: card.id,\n      lb: card.limit_break,\n      score: 100,\n      info: info,\n      char_name: card.char_name\n    });\n  }\n\n  processedCards.sort((a, b) => b.score - a.score);\n  return processedCards;\n}\n\nfunction CalculateTrainingGain(gains, weights, card, otherCards, trainingType, days, rainbow, typeCount) {\n  let trainingGains = [0, 0, 0, 0, 0, 0, 0];\n  let trainingBonus = card.tb + card.fan_bonus * weights.fanBonus;\n  if (typeCount >= card.highlander_threshold) trainingBonus += card.highlander_training;\n  let fsBonus = 1;\n  let motivationBonus = card.mb;\n\n  if (rainbow) {\n    fsBonus = card.fs_bonus * card.unique_fs_bonus;\n    motivationBonus += card.fs_motivation;\n    trainingBonus += card.fs_training;\n  }\n\n  let soloGain = [0, 0, 0, 0, 0, 0];\n\n  for (let stat = 0; stat < 6; stat++) {\n    if (gains[stat] === 0) continue;\n    let base = gains[stat] + card.stat_bonus[stat];\n\n    if (rainbow) {\n      base += card.fs_stats[stat];\n    }\n\n    soloGain[stat] += base * trainingBonus * (1 + weights.motivation * motivationBonus) * fsBonus * 1.05 * weights.umaBonus[stat] - gains[stat];\n  }\n\n  if (GainsToScore(soloGain, weights) > weights.minimum) {\n    for (let stat = 0; stat < 6; stat++) {\n      trainingGains[stat] += soloGain[stat] * days * CalculateCombinationChance([], otherCards, trainingType) * (rainbow ? weights.multi : 1);\n    }\n  }\n\n  if (otherCards.length == 0) return trainingGains;\n  const combinations = GetCombinations(otherCards);\n\n  for (let i = 0; i < combinations.length; i++) {\n    let fullCombinationGains = [0, 0, 0, 0, 0, 0];\n    let fullTotalGains = [0, 0, 0, 0, 0, 0];\n    trainingBonus += (combinations[i].length + 1) * card.crowd_bonus;\n    const combinationTrainingBonus = combinations[i].reduce((current, c) => {\n      let training = current + (c.tb - 1) + combinations[i].length * c.crowd_bonus;\n      if (typeCount >= c.highlander_threshold) training += c.highlander_training;\n      return training;\n    }, 1);\n    const combinationFriendshipBonus = combinations[i].reduce((current, c) => {\n      if (c.cardType === trainingType) {\n        return current * c.fs_bonus * c.unique_fs_bonus;\n      } else {\n        return current;\n      }\n    }, 1);\n    const combinationMotivationBonus = combinations[i].reduce((current, c) => current + c.mb - 1, 1);\n\n    for (let stat = 0; stat < 6; stat++) {\n      if (gains[stat] === 0) continue;\n      const combinationStatBonus = combinations[i].reduce((current, c) => current + c.stat_bonus[stat], 0);\n      let base = gains[stat] + combinationStatBonus;\n\n      if (rainbow) {\n        base += card.fs_stats[stat];\n      }\n\n      let combinationGains = base * combinationTrainingBonus * (1 + weights.motivation * combinationMotivationBonus) * combinationFriendshipBonus * (1.05 * combinations[i].length) * weights.umaBonus[stat];\n      let totalGains = (base + card.stat_bonus[stat]) * (combinationTrainingBonus + trainingBonus - 1) * (1 + weights.motivation * (combinationMotivationBonus + motivationBonus - 1)) * (combinationFriendshipBonus * fsBonus) * (1.05 * (combinations[i].length + 1)) * weights.umaBonus[stat];\n      fullCombinationGains[stat] += combinationGains;\n      fullTotalGains[stat] += totalGains;\n    }\n\n    trainingBonus -= (combinations[i].length + 1) * card.crowd_bonus;\n\n    if (GainsToScore(fullTotalGains, weights) > weights.minimum) {\n      for (let stat = 0; stat < 6; stat++) {\n        trainingGains[stat] += (fullTotalGains[stat] - fullCombinationGains[stat]) * days * CalculateCombinationChance(combinations[i], otherCards, trainingType) * (rainbow ? weights.multi : 1);\n      }\n    }\n  }\n\n  return trainingGains;\n}\n\n_c = CalculateTrainingGain;\n\nfunction CalculateCrossTrainingGain(gains, weights, card, otherCards, trainingType, days, typeCount, bonded) {\n  let trainingGains = [0, 0, 0, 0, 0, 0, 0];\n  let statCards = otherCards.filter(c => c.cardType === trainingType);\n  let trainingBonus = card.tb + card.fan_bonus * weights.fanBonus;\n  if (typeCount >= card.highlander_threshold) trainingBonus += card.highlander_training;\n  let fsBonus = 1;\n\n  if (card.group && bonded) {\n    fsBonus += (card.fs_bonus + card.unique_fs_bonus - 1) / 5;\n  }\n\n  const combinations = GetCombinations(otherCards);\n\n  for (let i = 0; i < combinations.length; i++) {\n    const combination = combinations[i];\n    let fullCombinationGains = [0, 0, 0, 0, 0, 0];\n    let fullTotalGains = [0, 0, 0, 0, 0, 0];\n    trainingBonus += (combination.length + 1) * card.crowd_bonus;\n    const combinationTrainingBonus = combination.reduce((current, c) => {\n      let training = current + (c.tb - 1) + combination.length * c.crowd_bonus;\n      if (typeCount >= c.highlander_threshold) training += c.highlander_training;\n      return training;\n    }, 1);\n    const combinationFriendshipBonus = combination.reduce((current, c) => {\n      if (c.cardType === trainingType) {\n        return current * c.fs_bonus * c.unique_fs_bonus;\n      } else {\n        return current;\n      }\n    }, 1);\n    const combinationMotivationBonus = combination.reduce((current, c) => current + c.mb - 1, 1);\n\n    for (let stat = 0; stat < 6; stat++) {\n      if (gains[stat] === 0) continue;\n      if (!combination.some(r => statCards.indexOf(r) > -1)) continue;\n      const combinationStatBonus = combination.reduce((current, c) => current + c.stat_bonus[stat], 0);\n      const base = gains[stat] + combinationStatBonus;\n      let combinationGains = base * combinationTrainingBonus * (1 + weights.motivation * combinationMotivationBonus) * combinationFriendshipBonus * (1.05 * combination.length) * weights.umaBonus[stat];\n      let totalGains = 0;\n\n      if (bonded) {\n        totalGains = (base + card.stat_bonus[stat] + card.fs_stats[stat]) * (combinationTrainingBonus + trainingBonus + card.fs_training - 1) * (1 + weights.motivation * (combinationMotivationBonus + card.mb + card.fs_motivation - 1)) * (combinationFriendshipBonus * fsBonus) * (1.05 * (combination.length + 1)) * weights.umaBonus[stat];\n      } else {\n        totalGains = (base + card.stat_bonus[stat]) * (combinationTrainingBonus + trainingBonus - 1) * (1 + weights.motivation * (combinationMotivationBonus + card.mb - 1)) * (1.05 * (combination.length + 1)) * weights.umaBonus[stat];\n      }\n\n      fullCombinationGains[stat] += combinationGains;\n      fullTotalGains[stat] += totalGains;\n    }\n\n    trainingBonus -= (combination.length + 1) * card.crowd_bonus;\n\n    if (GainsToScore(fullTotalGains, weights) > weights.minimum) {\n      for (let stat = 0; stat < 6; stat++) {\n        trainingGains[stat] += (fullTotalGains[stat] - fullCombinationGains[stat]) * days * CalculateCombinationChance(combinations[i], otherCards, trainingType) * weights.multi;\n      }\n    }\n  }\n\n  return trainingGains;\n}\n\n_c2 = CalculateCrossTrainingGain;\n\nfunction GainsToScore(gains, weights) {\n  let score = 0;\n\n  for (let stat = 0; stat < 6; stat++) {\n    score += Math.min(gains[stat], weights.cap) * weights.stats[stat];\n  }\n\n  return score;\n}\n\n_c3 = GainsToScore;\n\nfunction GetCombinations(cards) {\n  let minLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  let combinations = [];\n  let temp = [];\n  const count = Math.pow(2, cards.length);\n\n  for (let i = 0; i < count; i++) {\n    temp = [];\n\n    for (let j = 0; j < cards.length; j++) {\n      if (i & Math.pow(2, j)) {\n        temp.push(cards[j]);\n      }\n    }\n\n    if (temp.length >= minLength) {\n      combinations.push(temp);\n    }\n  }\n\n  return combinations;\n}\n\n_c4 = GetCombinations;\n\nfunction CalculateCombinationChance(combination, cards, trainingType) {\n  let chance = combination.reduce((current, card) => {\n    if (card.cardType === trainingType) {\n      return current * card.rainbowSpecialty;\n    } else {\n      return current * card.offSpecialty;\n    }\n  }, 1);\n\n  if (cards) {\n    const otherCards = cards.filter(c => combination.findIndex(d => c.index == d.index) === -1);\n    chance = otherCards.reduce((current, card) => {\n      if (card.cardType === trainingType) {\n        return current * (1 - card.rainbowSpecialty);\n      } else {\n        return current * (1 - card.offSpecialty);\n      }\n    }, chance);\n  }\n\n  return chance;\n}\n\n_c5 = CalculateCombinationChance;\nexport default TierList;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"CalculateTrainingGain\");\n$RefreshReg$(_c2, \"CalculateCrossTrainingGain\");\n$RefreshReg$(_c3, \"GainsToScore\");\n$RefreshReg$(_c4, \"GetCombinations\");\n$RefreshReg$(_c5, \"CalculateCombinationChance\");","map":{"version":3,"sources":["C:/Users/Chun/GakuTest/src/components/TierList.js"],"names":["React","SupportCard","events","supportCardProperties","Select","ordinal","type_names","TierList","Component","constructor","props","state","dropdownSelections","onDropdown1Changed","bind","onDropdown2Changed","onDropdown3Changed","newValue","newSelections","slice","value","console","log","setState","render","cards","selectedNames","selectedCards","map","card","char_name","weights","type","filter","e","processedCards","processCards","length","rows","current_row","step","score","boundary","i","push","id","lb","info","find","c","limit_break","cardSelected","tiers","tierNames","count","dropdownOptions","label","properties","Object","keys","sort","friendly_name","raceRewards","presentTypes","cardsPerType","baseBondNeeded","selectedCard","cardSpecialty","cardSpecialtyPercent","rainbowSpecialty","offSpecialty","cardType","index","preferredRainbowChances","chanceOfPreferredRainbow","reduce","current","chance","JSON","parse","stringify","bondNeeded","presentTypesWithCard","typeCount","Boolean","energyGain","statGains","starting_stats","event_stats","trainingDays","races","daysToBond","bondPerDay","rainbowDays","specialty","bonusSpec","specialtyPercent","otherPercent","offstatAppearanceDenominator","daysPerTraining","bondedDaysPerTraining","rainbowTraining","rainbowOverride","chanceOfSingleRainbow","cardsOfThisType","j","CalculateCombinationChance","stat","onlySummer","current_bonus","total","unique_fs_bonus","non_rainbow_gains","training","gains","unbondedTrainingGain","daysOnThisTraining","trainingGains","CalculateCrossTrainingGain","bondedTrainingGain","group","rainbow_gains","specialtyGains","summerTrainingGain","CalculateTrainingGain","race_bonus_gains","raceType","GainsToScore","stats","scenarioLink","indexOf","scenarioBonus","a","b","otherCards","trainingType","days","rainbow","trainingBonus","tb","fan_bonus","fanBonus","highlander_threshold","highlander_training","fsBonus","motivationBonus","mb","fs_bonus","fs_motivation","fs_training","soloGain","base","stat_bonus","fs_stats","motivation","umaBonus","minimum","multi","combinations","GetCombinations","fullCombinationGains","fullTotalGains","crowd_bonus","combinationTrainingBonus","combinationFriendshipBonus","combinationMotivationBonus","combinationStatBonus","combinationGains","totalGains","bonded","statCards","combination","some","r","Math","min","cap","minLength","temp","pow","findIndex","d"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SupportCard from './SupportCard';\nimport events from '../card-events';\nimport { supportCardProperties } from '../constants';\nimport Select from 'react-select';\n\nconst ordinal = [\"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"7th\"];\nconst type_names = [\"Speed\", \"Stamina\", \"Power\", \"Guts\", \"Wisdom\", \"\", \"Friend\"];\n\nclass TierList extends React.Component {\n    constructor (props) {\n        super(props);\n\n        this.state = {\n            dropdownSelections: [\"none\",\"none\",\"none\"]\n        }\n\n        this.onDropdown1Changed = this.onDropdown1Changed.bind(this);\n        this.onDropdown2Changed = this.onDropdown2Changed.bind(this);\n        this.onDropdown3Changed = this.onDropdown3Changed.bind(this);\n    }\n\n    //lmao\n    onDropdown1Changed(newValue) {\n        let newSelections = this.state.dropdownSelections.slice();\n        newSelections[0] = newValue.value;\n        console.log(newValue);\n        this.setState({dropdownSelections:newSelections});\n    }\n    onDropdown2Changed(newValue) {\n        let newSelections = this.state.dropdownSelections.slice();\n        newSelections[1] = newValue.value;\n        this.setState({dropdownSelections:newSelections});\n    }\n    onDropdown3Changed(newValue) {\n        let newSelections = this.state.dropdownSelections.slice();\n        newSelections[2] = newValue.value;\n        this.setState({dropdownSelections:newSelections});\n    }\n\n    render() {\n        let cards = this.props.cards;\n        let selectedNames = this.props.selectedCards.map(card => card.char_name);\n\n        \n        if(this.props.weights.type > -1) {\n            cards = cards.filter(e => e.type === this.props.weights.type);\n        }\n        \n\n        let processedCards = processCards(cards, this.props.weights, this.props.selectedCards);\n    \n        if (processedCards.length === 0) {\n            return <div className=\"tier-list\"></div>;\n        }\n    \n        let rows = [[]];\n        let current_row = 0;\n        let step = (processedCards[0].score - processedCards[processedCards.length - 1].score) / 7;\n        let boundary = processedCards[0].score - step;\n    \n        for (let i = 0; i < processedCards.length; i++) {\n            while (processedCards[i].score < boundary - 1) {\n                rows.push([]);\n                current_row++;\n                boundary -= step;\n            }\n    \n            rows[current_row].push((\n                <SupportCard\n                    id={processedCards[i].id}\n                    lb={processedCards[i].lb}\n                    score={processedCards[i].score}\n                    key={processedCards[i].id + \"LB\" + processedCards[i].lb}\n                    info={processedCards[i].info}\n                    charName={processedCards[i].char_name}\n                    selected={selectedNames}\n                    card={cards.find((c) => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb)}\n                    onClick={() => this.props.cardSelected(cards.find((c) => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb))}\n                    stats={this.state.dropdownSelections}\n                />\n            ));\n        }\n    \n        let tiers = [];\n    \n        for (let i = 0; i < 7; i++) {\n            tiers.push(\n                <div className=\"tier\" key={tierNames[i]}>\n                    <div className=\"tier-letter\">{tierNames[i]}</div>\n                    <div className=\"tier-images\">{rows[i]}</div>\n                </div>\n            )\n        }\n    \n        let count = this.props.selectedCards.filter((c) => c.type == this.props.weights.type).length;\n        let dropdownOptions = [{value:\"none\", label:\"None\"}];\n        let properties = Object.keys(supportCardProperties).sort();\n        for (let i = 0; i < properties.length; i++) {\n            dropdownOptions.push({\n                value:properties[i],\n                label:supportCardProperties[properties[i]].friendly_name\n            });\n        }\n    \n        return (\n            <div className=\"tier-list\">\n                <div className=\"selectors\">\n                    <span className=\"selectLabel\">Show Stats:</span>\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown1Changed} defaultValue={{value:\"none\", label:\"None\"}}/>\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown2Changed} defaultValue={{value:\"none\", label:\"None\"}}/>\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown3Changed} defaultValue={{value:\"none\", label:\"None\"}}/>\n                </div>\n                <span className=\"label\">Ranking for the {ordinal[count]} {type_names[this.props.weights.type]} card in this deck:</span>\n                {tiers}\n            </div>\n        );\n    }\n}\n\nconst tierNames = ['S', 'A', 'B', 'C', 'D', 'E', 'F']\nconst raceRewards = [\n    [2, 2, 2, 2, 2, 35],\n    [1.6, 1.6, 1.6, 1.6, 1.6, 25],\n    [1, 1, 1, 1, 1, 20],\n    [13.5,13.5,13.5,13.5,13.5,50]\n]\n\nfunction processCards(cards, weights, selectedCards) {\n    let processedCards = [];\n    selectedCards = selectedCards.slice();\n    \n    // Calculate some stuff here so we don't have to do it a million times later\n    let presentTypes = [false,false,false,false,false,false,false];\n    let cardsPerType = [[],[],[],[],[],[],[]];\n    let baseBondNeeded = 0;\n    for (let card = 0; card < selectedCards.length; card++) {\n        let selectedCard = selectedCards[card];\n        //let cardSpecialty = (100 + selectedCard.specialty_rate + weights.bonusSpec) * selectedCard.unique_specialty * selectedCard.fs_specialty;\n        let cardSpecialty = 50;\n        let cardSpecialtyPercent = (cardSpecialty) / (450 + cardSpecialty);\n        selectedCard.rainbowSpecialty = cardSpecialtyPercent;\n        selectedCard.offSpecialty = 100 / (450 + cardSpecialty);\n        selectedCard.cardType = selectedCard.type;\n        selectedCard.index = card;\n        presentTypes[selectedCard.cardType] = true;\n        cardsPerType[selectedCard.cardType].push(selectedCard);\n        if (selectedCard.cardType == 6) {\n            baseBondNeeded += 55 - 0\n        } else {\n            baseBondNeeded += 75 - 0\n        }\n        /*\n        if (events[selectedCard.id]) {\n            baseBondNeeded -= events[selectedCard.id][7];\n        }\n        */\n    }\n\n    \n    let preferredRainbowChances = [0, 0, 0, 0, 0];\n    /*\n    for (let i = 0; i < 5; i++) {\n        if (i != weights.type) {\n            if(cardsPerType[i].length > 0) {\n                let minimum = 1;\n                if (weights.prioritize) {\n                    minimum = 2;\n                }\n                let combos = GetCombinations(cardsPerType[i], minimum);\n                if (combos.length > 0) {\n                    preferredRainbowChances[i] = combos.reduce((current, combo) => {\n                        return current += CalculateCombinationChance(combo, undefined, i);\n                    }, 0);\n                }\n            }\n        }\n    }\n    */\n\n    let chanceOfPreferredRainbow = 1 - preferredRainbowChances.reduce((current, chance) => {\n        return current * (1 - chance);\n    }, 1);\n\n    for (let i = 0; i < cards.length; i++) {\n        let info = {};\n        let card = JSON.parse(JSON.stringify(cards[i]));\n        let cardType = card.type;\n        card.index = 6;\n        let bondNeeded = baseBondNeeded;\n        if (cardType == 6) {\n            bondNeeded += 55 - 0\n        } else {\n            bondNeeded += 75 - 0\n        }\n        let presentTypesWithCard = presentTypes.slice();\n        presentTypesWithCard[cardType] = true;\n\n        let typeCount = presentTypesWithCard.filter(Boolean).length;\n\n        // Add starting stats and stats from events\n        let score = 0;\n        let energyGain = 0;\n        let statGains = card.starting_stats.slice();\n        statGains.push(0);\n        \n        info.starting_stats = card.starting_stats.slice();\n        info.event_stats = [0,0,0,0,0,0,0];\n        \n        /*\n        if (events[card.id]) {\n            info.event_stats = events[card.id].slice();\n            for (let stat = 0; stat < 6; stat++) {\n                statGains[stat] += events[card.id][stat] * card.effect_size_up;\n                info.event_stats[stat] = events[card.id][stat] * card.effect_size_up;\n            }\n            energyGain += events[card.id][6] * card.energy_up;\n            bondNeeded -= events[card.id][7];\n            score += events[card.id][7];\n        } else {\n            // Dummy event values for cards we don't yet know the events for\n            if (card.rarity === 2) {\n                // 35 total\n                for (let stat = 0; stat < 5; stat++) {\n                    statGains[stat] += 7;\n                }\n                bondNeeded -= 5;\n            } else if (card.rarity === 3) {\n                // 45 total\n                for (let stat = 0; stat < 5; stat++) {\n                    statGains[stat] += 9;\n                }\n                bondNeeded -= 5;\n            }\n            score += 5;\n        }\n        \n        if (card.type_stats > 0) {\n            statGains[card.type] += card.type_stats;\n            for (let sc = 0; sc < selectedCards.length; sc++) {\n                if(selectedCards[sc].type < 6) {\n                    statGains[selectedCards[sc].type] += card.type_stats;\n                } else {\n                    statGains[0] += card.type_stats / 5;\n                    statGains[1] += card.type_stats / 5;\n                    statGains[2] += card.type_stats / 5;\n                    statGains[3] += card.type_stats / 5;\n                    statGains[4] += card.type_stats / 5;\n                }\n            }\n        }\n        */\n        let trainingDays = 65 - weights.races[0] - weights.races[1] - weights.races[2];\n        if(cardType === 6) trainingDays -= 5;\n        let daysToBond = bondNeeded / weights.bondPerDay;\n        let rainbowDays = trainingDays - daysToBond;\n        let specialty = (100 + 0 + weights.bonusSpec) * 1 * 1;\n        let specialtyPercent = specialty / (450 + specialty);\n        let otherPercent = 100 / (450 + specialty);\n        let offstatAppearanceDenominator = 4;\n        let daysPerTraining = [0,0,0,0,0];\n        let bondedDaysPerTraining = [0,0,0,0,0];\n        let rainbowTraining = 0;\n        \n        let rainbowOverride = 1;\n        if (cardType != 6) {\n            let chanceOfSingleRainbow = 0;\n            let cardsOfThisType = cardsPerType[cardType].slice();\n            card.rainbowSpecialty = specialtyPercent;\n            card.offSpecialty = otherPercent;\n            cardsOfThisType.push(card);\n            for (let j = 0; j < cardsOfThisType.length; j++) {\n                console.log(cardsOfThisType);\n                chanceOfSingleRainbow += CalculateCombinationChance([cardsOfThisType[j]], cardsOfThisType, cardType);\n            }\n            rainbowOverride = 1 - (chanceOfPreferredRainbow * chanceOfSingleRainbow);\n        }\n        \n        // Calculate appearance rates on each training\n        for (let stat = 0; stat < 5; stat++) {\n            if (stat == cardType) {\n                rainbowTraining = specialtyPercent * rainbowDays * rainbowOverride;\n                daysPerTraining[stat] = specialtyPercent * daysToBond;\n            } else {\n                daysPerTraining[stat] = otherPercent / offstatAppearanceDenominator * daysToBond;\n                bondedDaysPerTraining[stat] = otherPercent / offstatAppearanceDenominator * rainbowDays;\n            }\n        }\n\n        if (weights.onlySummer) {\n            rainbowTraining = 8 * specialtyPercent * rainbowOverride;\n        }\n\n        if (0) {\n            let current_bonus = 0;\n            let total = 0;\n            for (let j = rainbowTraining * 0.66; j > 0; j--) {\n                total += current_bonus;\n                current_bonus = 0;\n            }\n            card.unique_fs_bonus = 1 + total / rainbowTraining / 100;\n        }\n\n        // Stats from cross-training\n        info.non_rainbow_gains = [0,0,0,0,0,0,0];\n        for (let training = 0; training < 5; training ++) {\n            let gains = weights.unbondedTrainingGain[training];\n            let daysOnThisTraining = daysPerTraining[training];\n            energyGain += daysOnThisTraining * gains[6] * 0;\n\n            let trainingGains = CalculateCrossTrainingGain(gains, weights, card, selectedCards, training, daysOnThisTraining, typeCount, false);\n            \n            for (let stat = 0; stat < 6; stat ++) {\n                statGains[stat] += trainingGains[stat];\n                info.non_rainbow_gains[stat] += trainingGains[stat];\n            }\n            info.non_rainbow_gains[6] += (daysOnThisTraining * gains[6] * 0);\n        }\n\n        // Stats from cross-training while bonded\n        for (let training = 0; training < 5; training ++) {\n            let gains = weights.bondedTrainingGain[training];\n            let daysOnThisTraining = bondedDaysPerTraining[training];\n            energyGain += daysOnThisTraining * gains[6] * 0;\n            energyGain += daysOnThisTraining * gains[6] * 0;\n\n            let trainingGains = CalculateCrossTrainingGain(gains, weights, card, selectedCards, training, daysOnThisTraining, typeCount, true);\n            \n            for (let stat = 0; stat < 6; stat ++) {\n                statGains[stat] += trainingGains[stat];\n                info.non_rainbow_gains[stat] += trainingGains[stat];\n            }\n\n            info.non_rainbow_gains[6] += (daysOnThisTraining * gains[6] * 0);\n            info.non_rainbow_gains[6] += (daysOnThisTraining * gains[6] * 0);\n\n            if (training == 4 && card.group) {\n                energyGain += daysOnThisTraining * 1 / 5;\n            }\n        }\n\n        info.rainbow_gains = [0,0,0,0,0,0,0];\n\n        // Stats from rainbows\n        if (cardType < 6) {\n            energyGain += rainbowTraining * 0;\n            let specialtyGains = weights.bondedTrainingGain[cardType];\n            if (weights.onlySummer) {\n                specialtyGains = weights.summerTrainingGain[cardType];\n            }\n            let trainingGains = CalculateTrainingGain(specialtyGains, weights, card, selectedCards, cardType, rainbowTraining, true, typeCount);\n\n            info.rainbow_gains = trainingGains.slice();\n            info.rainbow_gains.push(rainbowTraining * 0);\n\n            for (let stat = 0; stat < 6; stat ++) {\n                statGains[stat] += trainingGains[stat];\n            }\n        }\n\n        info.race_bonus_gains = 0;\n\n        // Race bonus\n        for (let raceType = 0; raceType < 4; raceType++) {\n            for (let stat = 0; stat < 6; stat ++) {\n                statGains[stat] += raceRewards[raceType][stat] * (0 / 100) * weights.races[raceType];\n                info.race_bonus_gains += raceRewards[raceType][stat] * (0 / 100) * weights.races[raceType];\n            }\n        }\n\n        // Convert stat gains to score\n        score += GainsToScore(statGains, weights);\n        score += energyGain * weights.stats[6];\n\n        if(weights.scenarioLink.indexOf(card.char_name) > -1) {\n            score += weights.scenarioBonus;\n        }\n\n        processedCards.push({\n            id: card.id,\n            lb: card.limit_break,\n            score: 100,\n            info: info,\n            char_name: card.char_name\n        })\n    }\n\n    processedCards.sort((a, b) => b.score - a.score);\n    return processedCards;\n}\n\nfunction CalculateTrainingGain(gains, weights, card, otherCards, trainingType, days, rainbow, typeCount) {\n    let trainingGains = [0,0,0,0,0,0,0];\n\n    let trainingBonus = card.tb + card.fan_bonus * weights.fanBonus;\n    if (typeCount >= card.highlander_threshold) trainingBonus += card.highlander_training;\n    let fsBonus = 1;\n    let motivationBonus = card.mb;\n    if (rainbow) {\n        fsBonus = card.fs_bonus * card.unique_fs_bonus;\n        motivationBonus += card.fs_motivation;\n        trainingBonus += card.fs_training;\n    }\n\n    let soloGain = [0,0,0,0,0,0];\n    for (let stat = 0; stat < 6; stat ++) {\n        if (gains[stat] === 0) continue;\n\n        let base = gains[stat] + card.stat_bonus[stat];\n        if (rainbow) {\n            base += card.fs_stats[stat];\n        }\n        soloGain[stat] += (base \n            * trainingBonus\n            * (1 + weights.motivation * motivationBonus)\n            * fsBonus\n            * 1.05\n            * weights.umaBonus[stat]\n            - gains[stat]);\n    }\n    if (GainsToScore(soloGain, weights) > weights.minimum) {\n        for (let stat = 0; stat < 6; stat ++) {\n            trainingGains[stat] += soloGain[stat]\n                * days\n                * CalculateCombinationChance([], otherCards, trainingType)\n                * (rainbow ? weights.multi : 1);\n        }\n    }\n    \n    if (otherCards.length == 0) return trainingGains;\n\n    const combinations = GetCombinations(otherCards);\n\n    for (let i = 0; i < combinations.length; i++) {\n        let fullCombinationGains = [0,0,0,0,0,0];\n        let fullTotalGains = [0,0,0,0,0,0];\n        trainingBonus += (combinations[i].length + 1) * card.crowd_bonus;\n\n        const combinationTrainingBonus = combinations[i].reduce((current, c) => {\n            let training = current + (c.tb - 1) + (combinations[i].length * c.crowd_bonus);\n            if (typeCount >= c.highlander_threshold)\n                training += c.highlander_training;\n            return training;\n        }, 1);\n        const combinationFriendshipBonus = combinations[i].reduce((current, c) => {\n            if (c.cardType === trainingType) {\n                return current * c.fs_bonus * c.unique_fs_bonus;\n            } else {\n                return current;\n            }\n        }, 1);\n        const combinationMotivationBonus = combinations[i].reduce((current, c) => current + c.mb - 1, 1);\n        \n        for (let stat = 0; stat < 6; stat ++) {\n            if (gains[stat] === 0) continue;\n            \n            const combinationStatBonus = combinations[i].reduce((current, c) => current + c.stat_bonus[stat], 0);\n            let base = gains[stat] + combinationStatBonus;\n            if (rainbow) {\n                base += card.fs_stats[stat];\n            }\n\n            let combinationGains = (base \n                * combinationTrainingBonus\n                * (1 + weights.motivation * combinationMotivationBonus)\n                * combinationFriendshipBonus\n                * (1.05 * combinations[i].length)\n                * weights.umaBonus[stat]);\n                \n            let totalGains = ((base + card.stat_bonus[stat])\n                * (combinationTrainingBonus + trainingBonus - 1)\n                * (1 + weights.motivation * (combinationMotivationBonus + motivationBonus - 1))\n                * (combinationFriendshipBonus * fsBonus)\n                * (1.05 * (combinations[i].length + 1))\n                * weights.umaBonus[stat]);\n            \n            fullCombinationGains[stat] += combinationGains;\n            fullTotalGains[stat] += totalGains;\n        }\n        trainingBonus -= (combinations[i].length + 1) * card.crowd_bonus;\n        if (GainsToScore(fullTotalGains, weights) > weights.minimum) {\n            for (let stat = 0; stat < 6; stat ++) {\n                trainingGains[stat] += (fullTotalGains[stat] - fullCombinationGains[stat]) \n                    * days\n                    * CalculateCombinationChance(combinations[i], otherCards, trainingType)\n                    * (rainbow ? weights.multi : 1);\n            }\n        }\n    }\n\n    return trainingGains;\n}\n\nfunction CalculateCrossTrainingGain(gains, weights, card, otherCards, trainingType, days, typeCount, bonded) {\n    let trainingGains = [0,0,0,0,0,0,0];\n    let statCards = otherCards.filter((c) => c.cardType === trainingType);\n    let trainingBonus = card.tb + card.fan_bonus * weights.fanBonus;\n    if (typeCount >= card.highlander_threshold) trainingBonus += card.highlander_training;\n    let fsBonus = 1;\n    if (card.group && bonded) {\n        fsBonus += (card.fs_bonus + card.unique_fs_bonus - 1) / 5;\n    }\n    const combinations = GetCombinations(otherCards);\n\n    for (let i = 0; i < combinations.length; i++) {\n        const combination = combinations[i];\n        let fullCombinationGains = [0,0,0,0,0,0];\n        let fullTotalGains = [0,0,0,0,0,0];\n        trainingBonus += (combination.length + 1) * card.crowd_bonus;\n\n        const combinationTrainingBonus = combination.reduce((current, c) => {\n            let training = current + (c.tb - 1) + (combination.length * c.crowd_bonus);\n            if (typeCount >= c.highlander_threshold)\n                training += c.highlander_training;\n            return training;\n        }, 1);\n        const combinationFriendshipBonus = combination.reduce((current, c) => {\n            if (c.cardType === trainingType) {\n                return current * c.fs_bonus * c.unique_fs_bonus;\n            } else {\n                return current;\n            }\n        }, 1);\n        const combinationMotivationBonus = combination.reduce((current, c) => current + c.mb - 1, 1);\n        \n        for (let stat = 0; stat < 6; stat ++) {\n            if (gains[stat] === 0) continue;\n            if(!combination.some((r) => statCards.indexOf(r) > -1)) continue;\n            \n            const combinationStatBonus = combination.reduce((current, c) => current + c.stat_bonus[stat], 0);\n            const base = gains[stat] + combinationStatBonus;\n\n            let combinationGains = (base \n                * combinationTrainingBonus\n                * (1 + weights.motivation * combinationMotivationBonus)\n                * combinationFriendshipBonus\n                * (1.05 * combination.length)\n                * weights.umaBonus[stat]);\n            \n            let totalGains = 0;\n            if (bonded) {\n                totalGains = ((base + card.stat_bonus[stat] + card.fs_stats[stat])\n                    * (combinationTrainingBonus + trainingBonus + card.fs_training - 1)\n                    * (1 + weights.motivation * (combinationMotivationBonus + card.mb + card.fs_motivation - 1))\n                    * (combinationFriendshipBonus * fsBonus)\n                    * (1.05 * (combination.length + 1))\n                    * weights.umaBonus[stat]);\n            } else {\n                totalGains = ((base + card.stat_bonus[stat])\n                    * (combinationTrainingBonus + trainingBonus - 1)\n                    * (1 + weights.motivation * (combinationMotivationBonus + card.mb - 1))\n                    * (1.05 * (combination.length + 1))\n                    * weights.umaBonus[stat]);\n            }\n            \n            fullCombinationGains[stat] += combinationGains;\n            fullTotalGains[stat] += totalGains;\n        }\n        trainingBonus -= (combination.length + 1) * card.crowd_bonus;\n        if (GainsToScore(fullTotalGains, weights) > weights.minimum) {\n            for (let stat = 0; stat < 6; stat ++) {\n                trainingGains[stat] += (fullTotalGains[stat] - fullCombinationGains[stat]) \n                    * days\n                    * CalculateCombinationChance(combinations[i], otherCards, trainingType)\n                    * weights.multi;\n            }\n        }\n    }\n\n    return trainingGains;\n}\n\nfunction GainsToScore(gains, weights) {\n    let score = 0;\n    for (let stat = 0; stat < 6; stat ++) {\n        score += Math.min(gains[stat], weights.cap) * weights.stats[stat];\n    }\n    return score;\n}\n\nfunction GetCombinations(cards, minLength = 1) {\n    let combinations = [];\n    let temp = [];\n    const count = Math.pow(2, cards.length);\n\n    for (let i = 0; i < count; i++){\n        temp = [];\n        for (let j = 0; j<cards.length; j++) {\n            if (i & Math.pow(2,j)) { \n                temp.push(cards[j]);\n            }\n        }\n        if (temp.length >= minLength) {\n            combinations.push(temp);\n        }\n    }\n\n    return combinations;\n}\n\nfunction CalculateCombinationChance(combination, cards, trainingType) {\n    let chance = combination.reduce((current, card) => {\n        if (card.cardType === trainingType) {\n            return current * card.rainbowSpecialty;\n        } else {\n            return current * card.offSpecialty;\n        }\n    }, 1);\n    \n    if (cards) {\n        const otherCards = cards.filter((c) => combination.findIndex((d) => c.index == d.index) === -1);\n        chance = otherCards.reduce((current, card) => {\n            if (card.cardType === trainingType) {\n                return current * (1 - card.rainbowSpecialty);\n            } else {\n                return current * (1 - card.offSpecialty);\n            }\n        }, chance);\n    }\n\n    return chance;\n}\n\nexport default TierList;\n"]},"metadata":{},"sourceType":"module"}