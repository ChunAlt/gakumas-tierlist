{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Chun\\\\GakuTest\\\\src\\\\components\\\\TierList.js\";\nimport React from 'react';\nimport SupportCard from './SupportCard';\nimport events from '../card-events';\nimport { supportCardProperties } from '../constants';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ordinal = [\"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"7th\"];\nconst type_names = [\"Speed\", \"Stamina\", \"Power\", \"Guts\", \"Wisdom\", \"\", \"Friend\"];\n\nclass TierList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropdownSelections: [\"none\", \"none\", \"none\"]\n    };\n    this.onDropdown1Changed = this.onDropdown1Changed.bind(this);\n    this.onDropdown2Changed = this.onDropdown2Changed.bind(this);\n    this.onDropdown3Changed = this.onDropdown3Changed.bind(this);\n  } //lmao\n\n\n  onDropdown1Changed(newValue) {\n    let newSelections = this.state.dropdownSelections.slice();\n    newSelections[0] = newValue.value;\n    console.log(newValue);\n    this.setState({\n      dropdownSelections: newSelections\n    });\n  }\n\n  onDropdown2Changed(newValue) {\n    let newSelections = this.state.dropdownSelections.slice();\n    newSelections[1] = newValue.value;\n    this.setState({\n      dropdownSelections: newSelections\n    });\n  }\n\n  onDropdown3Changed(newValue) {\n    let newSelections = this.state.dropdownSelections.slice();\n    newSelections[2] = newValue.value;\n    this.setState({\n      dropdownSelections: newSelections\n    });\n  }\n\n  render() {\n    let cards = this.props.cards;\n    let selectedNames = this.props.selectedCards.map(card => card.char_name);\n\n    if (this.props.weights.type > -1) {\n      cards = cards.filter(e => e.type === this.props.weights.type);\n    }\n\n    let processedCards = processCards(cards, this.props.weights, this.props.selectedCards);\n\n    if (processedCards.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tier-list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 20\n      }, this);\n    }\n\n    let rows = [[]];\n    let current_row = 0;\n    let step = (processedCards[0].score - processedCards[processedCards.length - 1].score) / 7;\n    let boundary = processedCards[0].score - step;\n\n    for (let i = 0; i < processedCards.length; i++) {\n      while (processedCards[i].score < boundary - 1) {\n        rows.push([]);\n        current_row++;\n        boundary -= step;\n      }\n\n      rows[current_row].push( /*#__PURE__*/_jsxDEV(SupportCard, {\n        id: processedCards[i].id,\n        lb: processedCards[i].lb,\n        score: processedCards[i].score,\n        info: processedCards[i].info,\n        charName: processedCards[i].char_name,\n        selected: selectedNames,\n        card: cards.find(c => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb),\n        onClick: () => this.props.cardSelected(cards.find(c => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb)),\n        stats: this.state.dropdownSelections\n      }, processedCards[i].id + \"LB\" + processedCards[i].lb, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this));\n    }\n\n    let tiers = [];\n\n    for (let i = 0; i < 7; i++) {\n      tiers.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tier\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tier-letter\",\n          children: tierNames[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tier-images\",\n          children: rows[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)]\n      }, tierNames[i], true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this));\n    }\n\n    let count = this.props.selectedCards.filter(c => c.type == this.props.weights.type).length;\n    let dropdownOptions = [{\n      value: \"none\",\n      label: \"None\"\n    }];\n    let properties = Object.keys(supportCardProperties).sort();\n\n    for (let i = 0; i < properties.length; i++) {\n      dropdownOptions.push({\n        value: properties[i],\n        label: supportCardProperties[properties[i]].friendly_name\n      });\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tier-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selectors\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"selectLabel\",\n          children: \"Show Stats:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          className: \"select\",\n          options: dropdownOptions,\n          onChange: this.onDropdown1Changed,\n          defaultValue: {\n            value: \"none\",\n            label: \"None\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          className: \"select\",\n          options: dropdownOptions,\n          onChange: this.onDropdown2Changed,\n          defaultValue: {\n            value: \"none\",\n            label: \"None\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          className: \"select\",\n          options: dropdownOptions,\n          onChange: this.onDropdown3Changed,\n          defaultValue: {\n            value: \"none\",\n            label: \"None\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"label\",\n        children: [\"Ranking for the \", ordinal[count], \" \", type_names[this.props.weights.type], \" card in this deck:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), tiers]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst tierNames = ['S', 'A', 'B', 'C', 'D', 'E', 'F'];\n\nfunction processCards(cards, weights, selectedCards) {\n  let processedCards = [];\n  selectedCards = selectedCards.slice(); // Calculate some stuff here so we don't have to do it a million times later\n\n  let presentTypes = [false, false, false, false, false, false, false];\n  let cardsPerType = [[], [], [], [], [], [], []];\n\n  for (let card = 0; card < selectedCards.length; card++) {\n    let selectedCard = selectedCards[card];\n    selectedCard.cardType = selectedCard.type;\n    selectedCard.index = card;\n    presentTypes[selectedCard.cardType] = true;\n    cardsPerType[selectedCard.cardType].push(selectedCard);\n  }\n\n  for (let i = 0; i < cards.length; i++) {\n    let info = {};\n    let card = JSON.parse(JSON.stringify(cards[i]));\n    let cardType = card.type;\n    card.index = 6;\n    let presentTypesWithCard = presentTypes.slice();\n    presentTypesWithCard[cardType] = true; // Add starting stats and stats from events\n\n    let score = 0;\n    let statGains = card.start_b;\n    info.spRate = card.sp_r;\n    info.pb = card.pb;\n    statGains += card.lb * weights.classroom; // Convert stat gains to score\n\n    score += GainsToScore(statGains, weights);\n    score += energyGain * weights.stats[6];\n\n    if (weights.scenarioLink.indexOf(card.char_name) > -1) {\n      score += weights.scenarioBonus;\n    }\n\n    processedCards.push({\n      id: card.id,\n      lb: card.limit_break,\n      score: 100,\n      info: info,\n      char_name: card.char_name\n    });\n  }\n\n  processedCards.sort((a, b) => b.score - a.score);\n  return processedCards;\n}\n\nfunction GainsToScore(gains, weights) {\n  let score = 0;\n\n  for (let stat = 0; stat < 6; stat++) {\n    score += Math.min(gains[stat], weights.cap) * weights.stats[stat];\n  }\n\n  return score;\n}\n\n_c = GainsToScore;\n\nfunction GetCombinations(cards) {\n  let minLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  let combinations = [];\n  let temp = [];\n  const count = Math.pow(2, cards.length);\n\n  for (let i = 0; i < count; i++) {\n    temp = [];\n\n    for (let j = 0; j < cards.length; j++) {\n      if (i & Math.pow(2, j)) {\n        temp.push(cards[j]);\n      }\n    }\n\n    if (temp.length >= minLength) {\n      combinations.push(temp);\n    }\n  }\n\n  return combinations;\n}\n\n_c2 = GetCombinations;\n\nfunction CalculateCombinationChance(combination, cards, trainingType) {\n  let chance = combination.reduce((current, card) => {\n    if (card.cardType === trainingType) {\n      return current * card.rainbowSpecialty;\n    } else {\n      return current * card.offSpecialty;\n    }\n  }, 1);\n\n  if (cards) {\n    const otherCards = cards.filter(c => combination.findIndex(d => c.index == d.index) === -1);\n    chance = otherCards.reduce((current, card) => {\n      if (card.cardType === trainingType) {\n        return current * (1 - card.rainbowSpecialty);\n      } else {\n        return current * (1 - card.offSpecialty);\n      }\n    }, chance);\n  }\n\n  return chance;\n}\n\n_c3 = CalculateCombinationChance;\nexport default TierList;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"GainsToScore\");\n$RefreshReg$(_c2, \"GetCombinations\");\n$RefreshReg$(_c3, \"CalculateCombinationChance\");","map":{"version":3,"sources":["C:/Users/Chun/GakuTest/src/components/TierList.js"],"names":["React","SupportCard","events","supportCardProperties","Select","ordinal","type_names","TierList","Component","constructor","props","state","dropdownSelections","onDropdown1Changed","bind","onDropdown2Changed","onDropdown3Changed","newValue","newSelections","slice","value","console","log","setState","render","cards","selectedNames","selectedCards","map","card","char_name","weights","type","filter","e","processedCards","processCards","length","rows","current_row","step","score","boundary","i","push","id","lb","info","find","c","limit_break","cardSelected","tiers","tierNames","count","dropdownOptions","label","properties","Object","keys","sort","friendly_name","presentTypes","cardsPerType","selectedCard","cardType","index","JSON","parse","stringify","presentTypesWithCard","statGains","start_b","spRate","sp_r","pb","classroom","GainsToScore","energyGain","stats","scenarioLink","indexOf","scenarioBonus","a","b","gains","stat","Math","min","cap","GetCombinations","minLength","combinations","temp","pow","j","CalculateCombinationChance","combination","trainingType","chance","reduce","current","rainbowSpecialty","offSpecialty","otherCards","findIndex","d"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SupportCard from './SupportCard';\nimport events from '../card-events';\nimport { supportCardProperties } from '../constants';\nimport Select from 'react-select';\n\nconst ordinal = [\"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"7th\"];\nconst type_names = [\"Speed\", \"Stamina\", \"Power\", \"Guts\", \"Wisdom\", \"\", \"Friend\"];\n\nclass TierList extends React.Component {\n    constructor (props) {\n        super(props);\n\n        this.state = {\n            dropdownSelections: [\"none\",\"none\",\"none\"]\n        }\n\n        this.onDropdown1Changed = this.onDropdown1Changed.bind(this);\n        this.onDropdown2Changed = this.onDropdown2Changed.bind(this);\n        this.onDropdown3Changed = this.onDropdown3Changed.bind(this);\n    }\n\n    //lmao\n    onDropdown1Changed(newValue) {\n        let newSelections = this.state.dropdownSelections.slice();\n        newSelections[0] = newValue.value;\n        console.log(newValue);\n        this.setState({dropdownSelections:newSelections});\n    }\n    onDropdown2Changed(newValue) {\n        let newSelections = this.state.dropdownSelections.slice();\n        newSelections[1] = newValue.value;\n        this.setState({dropdownSelections:newSelections});\n    }\n    onDropdown3Changed(newValue) {\n        let newSelections = this.state.dropdownSelections.slice();\n        newSelections[2] = newValue.value;\n        this.setState({dropdownSelections:newSelections});\n    }\n\n    render() {\n        let cards = this.props.cards;\n        let selectedNames = this.props.selectedCards.map(card => card.char_name);\n\n        \n        if(this.props.weights.type > -1) {\n            cards = cards.filter(e => e.type === this.props.weights.type);\n        }\n        \n\n        let processedCards = processCards(cards, this.props.weights, this.props.selectedCards);\n    \n        if (processedCards.length === 0) {\n            return <div className=\"tier-list\"></div>;\n        }\n    \n        let rows = [[]];\n        let current_row = 0;\n        let step = (processedCards[0].score - processedCards[processedCards.length - 1].score) / 7;\n        let boundary = processedCards[0].score - step;\n    \n        for (let i = 0; i < processedCards.length; i++) {\n            while (processedCards[i].score < boundary - 1) {\n                rows.push([]);\n                current_row++;\n                boundary -= step;\n            }\n    \n            rows[current_row].push((\n                <SupportCard\n                    id={processedCards[i].id}\n                    lb={processedCards[i].lb}\n                    score={processedCards[i].score}\n                    key={processedCards[i].id + \"LB\" + processedCards[i].lb}\n                    info={processedCards[i].info}\n                    charName={processedCards[i].char_name}\n                    selected={selectedNames}\n                    card={cards.find((c) => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb)}\n                    onClick={() => this.props.cardSelected(cards.find((c) => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb))}\n                    stats={this.state.dropdownSelections}\n                />\n            ));\n        }\n    \n        let tiers = [];\n    \n        for (let i = 0; i < 7; i++) {\n            tiers.push(\n                <div className=\"tier\" key={tierNames[i]}>\n                    <div className=\"tier-letter\">{tierNames[i]}</div>\n                    <div className=\"tier-images\">{rows[i]}</div>\n                </div>\n            )\n        }\n    \n        let count = this.props.selectedCards.filter((c) => c.type == this.props.weights.type).length;\n        let dropdownOptions = [{value:\"none\", label:\"None\"}];\n        let properties = Object.keys(supportCardProperties).sort();\n        for (let i = 0; i < properties.length; i++) {\n            dropdownOptions.push({\n                value:properties[i],\n                label:supportCardProperties[properties[i]].friendly_name\n            });\n        }\n    \n        return (\n            <div className=\"tier-list\">\n                <div className=\"selectors\">\n                    <span className=\"selectLabel\">Show Stats:</span>\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown1Changed} defaultValue={{value:\"none\", label:\"None\"}}/>\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown2Changed} defaultValue={{value:\"none\", label:\"None\"}}/>\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown3Changed} defaultValue={{value:\"none\", label:\"None\"}}/>\n                </div>\n                <span className=\"label\">Ranking for the {ordinal[count]} {type_names[this.props.weights.type]} card in this deck:</span>\n                {tiers}\n            </div>\n        );\n    }\n}\n\nconst tierNames = ['S', 'A', 'B', 'C', 'D', 'E', 'F']\nfunction processCards(cards, weights, selectedCards) {\n    let processedCards = [];\n    selectedCards = selectedCards.slice();\n    \n    // Calculate some stuff here so we don't have to do it a million times later\n    let presentTypes = [false,false,false,false,false,false,false];\n    let cardsPerType = [[],[],[],[],[],[],[]];\n\n    for (let card = 0; card < selectedCards.length; card++) {\n        let selectedCard = selectedCards[card];\n        selectedCard.cardType = selectedCard.type;\n        selectedCard.index = card;\n        presentTypes[selectedCard.cardType] = true;\n        cardsPerType[selectedCard.cardType].push(selectedCard);\n    }\n\n    for (let i = 0; i < cards.length; i++) {\n        let info = {};\n        let card = JSON.parse(JSON.stringify(cards[i]));\n        let cardType = card.type;\n        card.index = 6;\n        let presentTypesWithCard = presentTypes.slice();\n        presentTypesWithCard[cardType] = true;\n\n        // Add starting stats and stats from events\n        let score = 0;\n        let statGains = card.start_b;\n\n        info.spRate = card.sp_r;\n        info.pb = card.pb;\n\n        statGains += card.lb*weights.classroom\n\n\n\n\n        // Convert stat gains to score\n        score += GainsToScore(statGains, weights);\n        score += energyGain * weights.stats[6];\n\n        if(weights.scenarioLink.indexOf(card.char_name) > -1) {\n            score += weights.scenarioBonus;\n        }\n\n        processedCards.push({\n            id: card.id,\n            lb: card.limit_break,\n            score: 100,\n            info: info,\n            char_name: card.char_name\n        })\n    }\n\n    processedCards.sort((a, b) => b.score - a.score);\n    return processedCards;\n}\n\nfunction GainsToScore(gains, weights) {\n    let score = 0;\n    for (let stat = 0; stat < 6; stat ++) {\n        score += Math.min(gains[stat], weights.cap) * weights.stats[stat];\n    }\n    return score;\n}\n\nfunction GetCombinations(cards, minLength = 1) {\n    let combinations = [];\n    let temp = [];\n    const count = Math.pow(2, cards.length);\n\n    for (let i = 0; i < count; i++){\n        temp = [];\n        for (let j = 0; j<cards.length; j++) {\n            if (i & Math.pow(2,j)) { \n                temp.push(cards[j]);\n            }\n        }\n        if (temp.length >= minLength) {\n            combinations.push(temp);\n        }\n    }\n\n    return combinations;\n}\n\nfunction CalculateCombinationChance(combination, cards, trainingType) {\n    let chance = combination.reduce((current, card) => {\n        if (card.cardType === trainingType) {\n            return current * card.rainbowSpecialty;\n        } else {\n            return current * card.offSpecialty;\n        }\n    }, 1);\n    \n    if (cards) {\n        const otherCards = cards.filter((c) => combination.findIndex((d) => c.index == d.index) === -1);\n        chance = otherCards.reduce((current, card) => {\n            if (card.cardType === trainingType) {\n                return current * (1 - card.rainbowSpecialty);\n            } else {\n                return current * (1 - card.offSpecialty);\n            }\n        }, chance);\n    }\n\n    return chance;\n}\n\nexport default TierList;\n"]},"metadata":{},"sourceType":"module"}