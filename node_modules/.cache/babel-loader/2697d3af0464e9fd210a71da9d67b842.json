{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Chun\\\\GakuTest\\\\src\\\\components\\\\TierList.js\";\nimport React from 'react';\nimport SupportCard from './SupportCard';\nimport { supportCardProperties } from '../constants';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ordinal = [\"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"7th\"];\nconst type_names = [\"Voice\", \"Dance\", \"Visual\"];\n\nclass TierList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropdownSelections: [\"none\", \"none\", \"none\"]\n    };\n    this.onDropdown1Changed = this.onDropdown1Changed.bind(this);\n    this.onDropdown2Changed = this.onDropdown2Changed.bind(this);\n    this.onDropdown3Changed = this.onDropdown3Changed.bind(this);\n  } //lmao\n\n\n  onDropdown1Changed(newValue) {\n    let newSelections = this.state.dropdownSelections.slice();\n    newSelections[0] = newValue.value;\n    console.log(newValue);\n    this.setState({\n      dropdownSelections: newSelections\n    });\n  }\n\n  onDropdown2Changed(newValue) {\n    let newSelections = this.state.dropdownSelections.slice();\n    newSelections[1] = newValue.value;\n    this.setState({\n      dropdownSelections: newSelections\n    });\n  }\n\n  onDropdown3Changed(newValue) {\n    let newSelections = this.state.dropdownSelections.slice();\n    newSelections[2] = newValue.value;\n    this.setState({\n      dropdownSelections: newSelections\n    });\n  }\n\n  render() {\n    let cards = this.props.cards;\n    let selectedNames = this.props.selectedCards.map(card => card.char_name);\n    let processedCardsAll = processCards(cards, this.props.weights, this.props.selectedCards);\n\n    if (this.props.weights.type > -1) {\n      cards = cards.filter(e => e.type === this.props.weights.type);\n    }\n\n    let processedCards = processCards(cards, this.props.weights, this.props.selectedCards);\n\n    if (processedCards.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tier-list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 20\n      }, this);\n    }\n\n    let rows = [[]];\n    let current_row = 0;\n    let step = (processedCards[0].score - processedCards[processedCards.length - 1].score) / 7;\n    let boundary = processedCards[0].score - step;\n\n    for (let i = 0; i < processedCards.length; i++) {\n      while (processedCards[i].score < boundary - 1) {\n        rows.push([]);\n        current_row++;\n        boundary -= step;\n      }\n\n      rows[current_row].push( /*#__PURE__*/_jsxDEV(SupportCard, {\n        id: processedCards[i].id,\n        lb: processedCards[i].lb,\n        score: processedCards[i].score,\n        info: processedCards[i].info,\n        charName: processedCards[i].char_name,\n        selected: selectedNames,\n        card: cards.find(c => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb),\n        onClick: () => this.props.cardSelected(cards.find(c => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb)),\n        stats: this.state.dropdownSelections\n      }, processedCards[i].id + \"LB\" + processedCards[i].lb, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this));\n    }\n\n    let finalScores = processScores(processedCardsAll, this.props.weights, this.props.selectedCards);\n    let tiers = [];\n\n    for (let i = 0; i < 7; i++) {\n      tiers.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tier\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tier-letter\",\n          children: tierNames[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tier-images\",\n          children: rows[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)]\n      }, tierNames[i], true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this));\n    }\n\n    let count = this.props.selectedCards.filter(c => c.type == this.props.weights.type).length;\n    let dropdownOptions = [{\n      value: \"none\",\n      label: \"None\"\n    }];\n    let properties = Object.keys(supportCardProperties).sort();\n\n    for (let i = 0; i < properties.length; i++) {\n      dropdownOptions.push({\n        value: properties[i],\n        label: supportCardProperties[properties[i]].friendly_name\n      });\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tier-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selectors\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"selectLabel\",\n          children: \"Show Stats:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          className: \"select\",\n          options: dropdownOptions,\n          onChange: this.onDropdown1Changed,\n          defaultValue: {\n            value: \"none\",\n            label: \"None\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          className: \"select\",\n          options: dropdownOptions,\n          onChange: this.onDropdown2Changed,\n          defaultValue: {\n            value: \"none\",\n            label: \"None\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          className: \"select\",\n          options: dropdownOptions,\n          onChange: this.onDropdown3Changed,\n          defaultValue: {\n            value: \"none\",\n            label: \"None\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), tiers]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst tierNames = ['S', 'A', 'B', 'C', 'D', 'E', 'F'];\n\nfunction processCards(cards, weights, selectedCards) {\n  let processedCards = [];\n  selectedCards = selectedCards.slice(); // Calculate some stuff here so we don't have to do it a million times later\n\n  for (let card = 0; card < selectedCards.length; card++) {\n    let selectedCard = selectedCards[card];\n    selectedCard.index = card;\n  }\n\n  for (let i = 0; i < cards.length; i++) {\n    let info = {};\n    let card = JSON.parse(JSON.stringify(cards[i]));\n    card.index = 6; // Add starting stats and stats from events\n\n    let score = 0;\n    let statGains = card.start_b;\n    info.type = card.type;\n    info.start_b = card.start_b;\n    info.pb = card.pb;\n    info.spRate = card.sp_r;\n    info.spp = card.spp;\n    info.pb = card.pb;\n\n    if (card.type === 0) {\n      statGains += card.lb * weights.vocalLessons[1];\n    } else if (card.type === 1) {\n      statGains += card.lb * weights.danceLessons[1];\n    } else {\n      statGains += card.lb * weights.visualLessons[1];\n    }\n\n    if (card.type === 0) {\n      statGains += card.sp_lb * weights.vocalLessons[2];\n    } else if (card.type === 1) {\n      statGains += card.sp_lb * weights.danceLessons[2];\n    } else {\n      statGains += card.sp_lb * weights.visualLessons[2];\n    }\n\n    statGains += card.rest_b * weights.rest;\n    statGains += card.gb * weights.gift;\n    statGains += card.db * weights.date;\n    statGains += card.sb * weights.shop;\n    statGains += card.cb * weights.classroom;\n    statGains += card.pdb * weights.drink;\n    statGains += card.mb;\n    statGains += card.ub * weights.upgrade.reduce((total, current) => total + current, 0);\n    statGains += card.m_ub * weights.upgrade[1];\n    statGains += card.a_cb * weights.cardAcq[0];\n    statGains += card.m_cb * weights.cardAcq[1];\n    statGains += card.con_cb * weights.cardAcq[2];\n    statGains += card.remove_b * weights.removal; // Convert stat gains to score\n\n    score += statGains;\n    processedCards.push({\n      id: card.id,\n      lb: card.limit_break,\n      score: score,\n      info: info,\n      char_name: card.char_name\n    });\n  }\n\n  processedCards.sort((a, b) => b.score - a.score);\n  return processedCards;\n}\n\nfunction processScores(processedCards, weights, selectedCards) {\n  selectedCards = selectedCards.slice();\n  let startingStats = [0, 0, 0];\n  startingStats += weights.idolStats + weights.memStats;\n  let startingMult = [0, 0, 0];\n  startingMult += weights.idolMult + weights.memMult;\n  let statBonus = [0, 0, 0];\n  let spRate = weights.spRate;\n\n  for (let card = 0; card < selectedCards.length; card++) {\n    let cardID = selectedCards[card].id;\n    let cardLB = selectedCards[card].limit_break;\n    let type = selectedCards[card].type;\n    let matchingCards = processedCards.find(processedCards => processedCards.id === cardID && processedCards.lb === cardLB);\n    startingStats[type] += matchingCards.info.start_b;\n    startingMult[type] += matchingCards.info.pb;\n    spRate += matchingCards.info.spRate;\n    statBonus[type] += matchingCards.score;\n  }\n\n  let finalScore = startingStats + statBonus;\n  let results = [{\n    startingStats: startingStats,\n    startingMult: startingMult,\n    spRate: spRate,\n    statBonus: statBonus,\n    finalScore: finalScore\n  }];\n  console.log(results);\n  return results;\n}\n\nexport default TierList;","map":{"version":3,"sources":["C:/Users/Chun/GakuTest/src/components/TierList.js"],"names":["React","SupportCard","supportCardProperties","Select","ordinal","type_names","TierList","Component","constructor","props","state","dropdownSelections","onDropdown1Changed","bind","onDropdown2Changed","onDropdown3Changed","newValue","newSelections","slice","value","console","log","setState","render","cards","selectedNames","selectedCards","map","card","char_name","processedCardsAll","processCards","weights","type","filter","e","processedCards","length","rows","current_row","step","score","boundary","i","push","id","lb","info","find","c","limit_break","cardSelected","finalScores","processScores","tiers","tierNames","count","dropdownOptions","label","properties","Object","keys","sort","friendly_name","selectedCard","index","JSON","parse","stringify","statGains","start_b","pb","spRate","sp_r","spp","vocalLessons","danceLessons","visualLessons","sp_lb","rest_b","rest","gb","gift","db","date","sb","shop","cb","classroom","pdb","drink","mb","ub","upgrade","reduce","total","current","m_ub","a_cb","cardAcq","m_cb","con_cb","remove_b","removal","a","b","startingStats","idolStats","memStats","startingMult","idolMult","memMult","statBonus","cardID","cardLB","matchingCards","finalScore","results"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,qBAAT,QAAsC,cAAtC;AACA,OAAOC,MAAP,MAAmB,cAAnB;;AAEA,MAAMC,OAAO,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CAAhB;AACA,MAAMC,UAAU,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,QAAnB,CAAnB;;AAEA,MAAMC,QAAN,SAAuBN,KAAK,CAACO,SAA7B,CAAuC;AACnCC,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAChB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,kBAAkB,EAAE,CAAC,MAAD,EAAQ,MAAR,EAAe,MAAf;AADX,KAAb;AAIA,SAAKC,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKC,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBD,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKE,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBF,IAAxB,CAA6B,IAA7B,CAA1B;AACH,GAXkC,CAanC;;;AACAD,EAAAA,kBAAkB,CAACI,QAAD,EAAW;AACzB,QAAIC,aAAa,GAAG,KAAKP,KAAL,CAAWC,kBAAX,CAA8BO,KAA9B,EAApB;AACAD,IAAAA,aAAa,CAAC,CAAD,CAAb,GAAmBD,QAAQ,CAACG,KAA5B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACA,SAAKM,QAAL,CAAc;AAACX,MAAAA,kBAAkB,EAACM;AAApB,KAAd;AACH;;AACDH,EAAAA,kBAAkB,CAACE,QAAD,EAAW;AACzB,QAAIC,aAAa,GAAG,KAAKP,KAAL,CAAWC,kBAAX,CAA8BO,KAA9B,EAApB;AACAD,IAAAA,aAAa,CAAC,CAAD,CAAb,GAAmBD,QAAQ,CAACG,KAA5B;AACA,SAAKG,QAAL,CAAc;AAACX,MAAAA,kBAAkB,EAACM;AAApB,KAAd;AACH;;AACDF,EAAAA,kBAAkB,CAACC,QAAD,EAAW;AACzB,QAAIC,aAAa,GAAG,KAAKP,KAAL,CAAWC,kBAAX,CAA8BO,KAA9B,EAApB;AACAD,IAAAA,aAAa,CAAC,CAAD,CAAb,GAAmBD,QAAQ,CAACG,KAA5B;AACA,SAAKG,QAAL,CAAc;AAACX,MAAAA,kBAAkB,EAACM;AAApB,KAAd;AACH;;AAEDM,EAAAA,MAAM,GAAG;AACL,QAAIC,KAAK,GAAG,KAAKf,KAAL,CAAWe,KAAvB;AACA,QAAIC,aAAa,GAAG,KAAKhB,KAAL,CAAWiB,aAAX,CAAyBC,GAAzB,CAA6BC,IAAI,IAAIA,IAAI,CAACC,SAA1C,CAApB;AAEA,QAAIC,iBAAiB,GAAGC,YAAY,CAACP,KAAD,EAAQ,KAAKf,KAAL,CAAWuB,OAAnB,EAA4B,KAAKvB,KAAL,CAAWiB,aAAvC,CAApC;;AAEA,QAAG,KAAKjB,KAAL,CAAWuB,OAAX,CAAmBC,IAAnB,GAA0B,CAAC,CAA9B,EAAiC;AAC7BT,MAAAA,KAAK,GAAGA,KAAK,CAACU,MAAN,CAAaC,CAAC,IAAIA,CAAC,CAACF,IAAF,KAAW,KAAKxB,KAAL,CAAWuB,OAAX,CAAmBC,IAAhD,CAAR;AACH;;AAED,QAAIG,cAAc,GAAGL,YAAY,CAACP,KAAD,EAAQ,KAAKf,KAAL,CAAWuB,OAAnB,EAA4B,KAAKvB,KAAL,CAAWiB,aAAvC,CAAjC;;AAEA,QAAIU,cAAc,CAACC,MAAf,KAA0B,CAA9B,EAAiC;AAC7B,0BAAO;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;;AAED,QAAIC,IAAI,GAAG,CAAC,EAAD,CAAX;AACA,QAAIC,WAAW,GAAG,CAAlB;AACA,QAAIC,IAAI,GAAG,CAACJ,cAAc,CAAC,CAAD,CAAd,CAAkBK,KAAlB,GAA0BL,cAAc,CAACA,cAAc,CAACC,MAAf,GAAwB,CAAzB,CAAd,CAA0CI,KAArE,IAA8E,CAAzF;AACA,QAAIC,QAAQ,GAAGN,cAAc,CAAC,CAAD,CAAd,CAAkBK,KAAlB,GAA0BD,IAAzC;;AAEA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,cAAc,CAACC,MAAnC,EAA2CM,CAAC,EAA5C,EAAgD;AAC5C,aAAOP,cAAc,CAACO,CAAD,CAAd,CAAkBF,KAAlB,GAA0BC,QAAQ,GAAG,CAA5C,EAA+C;AAC3CJ,QAAAA,IAAI,CAACM,IAAL,CAAU,EAAV;AACAL,QAAAA,WAAW;AACXG,QAAAA,QAAQ,IAAIF,IAAZ;AACH;;AAEDF,MAAAA,IAAI,CAACC,WAAD,CAAJ,CAAkBK,IAAlB,eACI,QAAC,WAAD;AACI,QAAA,EAAE,EAAER,cAAc,CAACO,CAAD,CAAd,CAAkBE,EAD1B;AAEI,QAAA,EAAE,EAAET,cAAc,CAACO,CAAD,CAAd,CAAkBG,EAF1B;AAGI,QAAA,KAAK,EAAEV,cAAc,CAACO,CAAD,CAAd,CAAkBF,KAH7B;AAKI,QAAA,IAAI,EAAEL,cAAc,CAACO,CAAD,CAAd,CAAkBI,IAL5B;AAMI,QAAA,QAAQ,EAAEX,cAAc,CAACO,CAAD,CAAd,CAAkBd,SANhC;AAOI,QAAA,QAAQ,EAAEJ,aAPd;AAQI,QAAA,IAAI,EAAED,KAAK,CAACwB,IAAN,CAAYC,CAAD,IAAOA,CAAC,CAACJ,EAAF,KAAST,cAAc,CAACO,CAAD,CAAd,CAAkBE,EAA3B,IAAiCI,CAAC,CAACC,WAAF,KAAkBd,cAAc,CAACO,CAAD,CAAd,CAAkBG,EAAvF,CARV;AASI,QAAA,OAAO,EAAE,MAAM,KAAKrC,KAAL,CAAW0C,YAAX,CAAwB3B,KAAK,CAACwB,IAAN,CAAYC,CAAD,IAAOA,CAAC,CAACJ,EAAF,KAAST,cAAc,CAACO,CAAD,CAAd,CAAkBE,EAA3B,IAAiCI,CAAC,CAACC,WAAF,KAAkBd,cAAc,CAACO,CAAD,CAAd,CAAkBG,EAAvF,CAAxB,CATnB;AAUI,QAAA,KAAK,EAAE,KAAKpC,KAAL,CAAWC;AAVtB,SAISyB,cAAc,CAACO,CAAD,CAAd,CAAkBE,EAAlB,GAAuB,IAAvB,GAA8BT,cAAc,CAACO,CAAD,CAAd,CAAkBG,EAJzD;AAAA;AAAA;AAAA;AAAA,cADJ;AAcH;;AAED,QAAIM,WAAW,GAAGC,aAAa,CAACvB,iBAAD,EAAoB,KAAKrB,KAAL,CAAWuB,OAA/B,EAAwC,KAAKvB,KAAL,CAAWiB,aAAnD,CAA/B;AACA,QAAI4B,KAAK,GAAG,EAAZ;;AAEA,SAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBW,MAAAA,KAAK,CAACV,IAAN,eACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,oBAA8BW,SAAS,CAACZ,CAAD;AAAvC;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,oBAA8BL,IAAI,CAACK,CAAD;AAAlC;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA,SAA2BY,SAAS,CAACZ,CAAD,CAApC;AAAA;AAAA;AAAA;AAAA,cADJ;AAMH;;AAED,QAAIa,KAAK,GAAG,KAAK/C,KAAL,CAAWiB,aAAX,CAAyBQ,MAAzB,CAAiCe,CAAD,IAAOA,CAAC,CAAChB,IAAF,IAAU,KAAKxB,KAAL,CAAWuB,OAAX,CAAmBC,IAApE,EAA0EI,MAAtF;AACA,QAAIoB,eAAe,GAAG,CAAC;AAACtC,MAAAA,KAAK,EAAC,MAAP;AAAeuC,MAAAA,KAAK,EAAC;AAArB,KAAD,CAAtB;AACA,QAAIC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAY3D,qBAAZ,EAAmC4D,IAAnC,EAAjB;;AACA,SAAK,IAAInB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgB,UAAU,CAACtB,MAA/B,EAAuCM,CAAC,EAAxC,EAA4C;AACxCc,MAAAA,eAAe,CAACb,IAAhB,CAAqB;AACjBzB,QAAAA,KAAK,EAACwC,UAAU,CAAChB,CAAD,CADC;AAEjBe,QAAAA,KAAK,EAACxD,qBAAqB,CAACyD,UAAU,CAAChB,CAAD,CAAX,CAArB,CAAqCoB;AAF1B,OAArB;AAIH;;AAED,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BAEI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCAEI;AAAM,UAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAC,QAAlB;AAA2B,UAAA,OAAO,EAAEN,eAApC;AAAqD,UAAA,QAAQ,EAAE,KAAK7C,kBAApE;AAAwF,UAAA,YAAY,EAAE;AAACO,YAAAA,KAAK,EAAC,MAAP;AAAeuC,YAAAA,KAAK,EAAC;AAArB;AAAtG;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAC,QAAlB;AAA2B,UAAA,OAAO,EAAED,eAApC;AAAqD,UAAA,QAAQ,EAAE,KAAK3C,kBAApE;AAAwF,UAAA,YAAY,EAAE;AAACK,YAAAA,KAAK,EAAC,MAAP;AAAeuC,YAAAA,KAAK,EAAC;AAArB;AAAtG;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAC,QAAlB;AAA2B,UAAA,OAAO,EAAED,eAApC;AAAqD,UAAA,QAAQ,EAAE,KAAK1C,kBAApE;AAAwF,UAAA,YAAY,EAAE;AAACI,YAAAA,KAAK,EAAC,MAAP;AAAeuC,YAAAA,KAAK,EAAC;AAArB;AAAtG;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,EASKJ,KATL;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAaH;;AA9GkC;;AAiHvC,MAAMC,SAAS,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,CAAlB;;AACA,SAASxB,YAAT,CAAsBP,KAAtB,EAA6BQ,OAA7B,EAAsCN,aAAtC,EAAqD;AACjD,MAAIU,cAAc,GAAG,EAArB;AACAV,EAAAA,aAAa,GAAGA,aAAa,CAACR,KAAd,EAAhB,CAFiD,CAIjD;;AACA,OAAK,IAAIU,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGF,aAAa,CAACW,MAAxC,EAAgDT,IAAI,EAApD,EAAwD;AACpD,QAAIoC,YAAY,GAAGtC,aAAa,CAACE,IAAD,CAAhC;AACAoC,IAAAA,YAAY,CAACC,KAAb,GAAqBrC,IAArB;AACH;;AAED,OAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnB,KAAK,CAACa,MAA1B,EAAkCM,CAAC,EAAnC,EAAuC;AACnC,QAAII,IAAI,GAAG,EAAX;AACA,QAAInB,IAAI,GAAGsC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe5C,KAAK,CAACmB,CAAD,CAApB,CAAX,CAAX;AACAf,IAAAA,IAAI,CAACqC,KAAL,GAAa,CAAb,CAHmC,CAKnC;;AACA,QAAIxB,KAAK,GAAG,CAAZ;AACA,QAAI4B,SAAS,GAAGzC,IAAI,CAAC0C,OAArB;AAEAvB,IAAAA,IAAI,CAACd,IAAL,GAAYL,IAAI,CAACK,IAAjB;AACAc,IAAAA,IAAI,CAACuB,OAAL,GAAe1C,IAAI,CAAC0C,OAApB;AACAvB,IAAAA,IAAI,CAACwB,EAAL,GAAU3C,IAAI,CAAC2C,EAAf;AACAxB,IAAAA,IAAI,CAACyB,MAAL,GAAc5C,IAAI,CAAC6C,IAAnB;AACA1B,IAAAA,IAAI,CAAC2B,GAAL,GAAW9C,IAAI,CAAC8C,GAAhB;AACA3B,IAAAA,IAAI,CAACwB,EAAL,GAAU3C,IAAI,CAAC2C,EAAf;;AAEA,QAAI3C,IAAI,CAACK,IAAL,KAAc,CAAlB,EAAqB;AACjBoC,MAAAA,SAAS,IAAIzC,IAAI,CAACkB,EAAL,GAAUd,OAAO,CAAC2C,YAAR,CAAqB,CAArB,CAAvB;AACH,KAFD,MAEO,IAAI/C,IAAI,CAACK,IAAL,KAAc,CAAlB,EAAqB;AACxBoC,MAAAA,SAAS,IAAIzC,IAAI,CAACkB,EAAL,GAAUd,OAAO,CAAC4C,YAAR,CAAqB,CAArB,CAAvB;AACH,KAFM,MAEA;AACHP,MAAAA,SAAS,IAAIzC,IAAI,CAACkB,EAAL,GAAUd,OAAO,CAAC6C,aAAR,CAAsB,CAAtB,CAAvB;AACH;;AAED,QAAIjD,IAAI,CAACK,IAAL,KAAc,CAAlB,EAAqB;AACjBoC,MAAAA,SAAS,IAAIzC,IAAI,CAACkD,KAAL,GAAa9C,OAAO,CAAC2C,YAAR,CAAqB,CAArB,CAA1B;AACH,KAFD,MAEO,IAAI/C,IAAI,CAACK,IAAL,KAAc,CAAlB,EAAqB;AACxBoC,MAAAA,SAAS,IAAIzC,IAAI,CAACkD,KAAL,GAAa9C,OAAO,CAAC4C,YAAR,CAAqB,CAArB,CAA1B;AACH,KAFM,MAEA;AACHP,MAAAA,SAAS,IAAIzC,IAAI,CAACkD,KAAL,GAAa9C,OAAO,CAAC6C,aAAR,CAAsB,CAAtB,CAA1B;AACH;;AAEDR,IAAAA,SAAS,IAAIzC,IAAI,CAACmD,MAAL,GAAc/C,OAAO,CAACgD,IAAnC;AACAX,IAAAA,SAAS,IAAIzC,IAAI,CAACqD,EAAL,GAAUjD,OAAO,CAACkD,IAA/B;AACAb,IAAAA,SAAS,IAAIzC,IAAI,CAACuD,EAAL,GAAUnD,OAAO,CAACoD,IAA/B;AACAf,IAAAA,SAAS,IAAIzC,IAAI,CAACyD,EAAL,GAAUrD,OAAO,CAACsD,IAA/B;AACAjB,IAAAA,SAAS,IAAIzC,IAAI,CAAC2D,EAAL,GAAUvD,OAAO,CAACwD,SAA/B;AACAnB,IAAAA,SAAS,IAAIzC,IAAI,CAAC6D,GAAL,GAAWzD,OAAO,CAAC0D,KAAhC;AACArB,IAAAA,SAAS,IAAIzC,IAAI,CAAC+D,EAAlB;AAEAtB,IAAAA,SAAS,IAAIzC,IAAI,CAACgE,EAAL,GAAU5D,OAAO,CAAC6D,OAAR,CAAgBC,MAAhB,CAAuB,CAACC,KAAD,EAAQC,OAAR,KAAoBD,KAAK,GAAGC,OAAnD,EAA4D,CAA5D,CAAvB;AACA3B,IAAAA,SAAS,IAAIzC,IAAI,CAACqE,IAAL,GAAYjE,OAAO,CAAC6D,OAAR,CAAgB,CAAhB,CAAzB;AAEAxB,IAAAA,SAAS,IAAIzC,IAAI,CAACsE,IAAL,GAAYlE,OAAO,CAACmE,OAAR,CAAgB,CAAhB,CAAzB;AACA9B,IAAAA,SAAS,IAAIzC,IAAI,CAACwE,IAAL,GAAYpE,OAAO,CAACmE,OAAR,CAAgB,CAAhB,CAAzB;AACA9B,IAAAA,SAAS,IAAIzC,IAAI,CAACyE,MAAL,GAAcrE,OAAO,CAACmE,OAAR,CAAgB,CAAhB,CAA3B;AAEA9B,IAAAA,SAAS,IAAIzC,IAAI,CAAC0E,QAAL,GAAgBtE,OAAO,CAACuE,OAArC,CA/CmC,CAiDnC;;AACA9D,IAAAA,KAAK,IAAI4B,SAAT;AAEAjC,IAAAA,cAAc,CAACQ,IAAf,CAAoB;AAChBC,MAAAA,EAAE,EAAEjB,IAAI,CAACiB,EADO;AAEhBC,MAAAA,EAAE,EAAElB,IAAI,CAACsB,WAFO;AAGhBT,MAAAA,KAAK,EAAEA,KAHS;AAIhBM,MAAAA,IAAI,EAAEA,IAJU;AAKhBlB,MAAAA,SAAS,EAAED,IAAI,CAACC;AALA,KAApB;AAOH;;AACDO,EAAAA,cAAc,CAAC0B,IAAf,CAAoB,CAAC0C,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAAChE,KAAF,GAAU+D,CAAC,CAAC/D,KAA1C;AACA,SAAOL,cAAP;AACH;;AAED,SAASiB,aAAT,CAAuBjB,cAAvB,EAAuCJ,OAAvC,EAAgDN,aAAhD,EAA+D;AAC3DA,EAAAA,aAAa,GAAGA,aAAa,CAACR,KAAd,EAAhB;AACA,MAAIwF,aAAa,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAApB;AACAA,EAAAA,aAAa,IAAI1E,OAAO,CAAC2E,SAAR,GAAoB3E,OAAO,CAAC4E,QAA7C;AAEA,MAAIC,YAAY,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAnB;AACAA,EAAAA,YAAY,IAAI7E,OAAO,CAAC8E,QAAR,GAAmB9E,OAAO,CAAC+E,OAA3C;AAEA,MAAIC,SAAS,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAhB;AACA,MAAIxC,MAAM,GAAGxC,OAAO,CAACwC,MAArB;;AACA,OAAK,IAAI5C,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGF,aAAa,CAACW,MAAxC,EAAgDT,IAAI,EAApD,EAAwD;AACpD,QAAIqF,MAAM,GAAGvF,aAAa,CAACE,IAAD,CAAb,CAAoBiB,EAAjC;AACA,QAAIqE,MAAM,GAAGxF,aAAa,CAACE,IAAD,CAAb,CAAoBsB,WAAjC;AACA,QAAIjB,IAAI,GAAGP,aAAa,CAACE,IAAD,CAAb,CAAoBK,IAA/B;AACA,QAAIkF,aAAa,GAAG/E,cAAc,CAACY,IAAf,CAAoBZ,cAAc,IAAIA,cAAc,CAACS,EAAf,KAAsBoE,MAAtB,IAAgC7E,cAAc,CAACU,EAAf,KAAsBoE,MAA5F,CAApB;AAEAR,IAAAA,aAAa,CAACzE,IAAD,CAAb,IAAuBkF,aAAa,CAACpE,IAAd,CAAmBuB,OAA1C;AACAuC,IAAAA,YAAY,CAAC5E,IAAD,CAAZ,IAAsBkF,aAAa,CAACpE,IAAd,CAAmBwB,EAAzC;AAEAC,IAAAA,MAAM,IAAI2C,aAAa,CAACpE,IAAd,CAAmByB,MAA7B;AAEAwC,IAAAA,SAAS,CAAC/E,IAAD,CAAT,IAAmBkF,aAAa,CAAC1E,KAAjC;AACH;;AACD,MAAI2E,UAAU,GAAGV,aAAa,GAAGM,SAAjC;AAEA,MAAIK,OAAO,GAAG,CAAC;AACXX,IAAAA,aAAa,EAAEA,aADJ;AAEXG,IAAAA,YAAY,EAAEA,YAFH;AAGXrC,IAAAA,MAAM,EAAEA,MAHG;AAIXwC,IAAAA,SAAS,EAAEA,SAJA;AAKXI,IAAAA,UAAU,EAAEA;AALD,GAAD,CAAd;AAOAhG,EAAAA,OAAO,CAACC,GAAR,CAAYgG,OAAZ;AACA,SAAOA,OAAP;AACC;;AAGL,eAAe/G,QAAf","sourcesContent":["import React from 'react';\nimport SupportCard from './SupportCard';\nimport { supportCardProperties } from '../constants';\nimport Select from 'react-select';\n\nconst ordinal = [\"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"7th\"];\nconst type_names = [\"Voice\", \"Dance\", \"Visual\"];\n\nclass TierList extends React.Component {\n    constructor (props) {\n        super(props);\n\n        this.state = {\n            dropdownSelections: [\"none\",\"none\",\"none\"]\n        }\n\n        this.onDropdown1Changed = this.onDropdown1Changed.bind(this);\n        this.onDropdown2Changed = this.onDropdown2Changed.bind(this);\n        this.onDropdown3Changed = this.onDropdown3Changed.bind(this);\n    }\n\n    //lmao\n    onDropdown1Changed(newValue) {\n        let newSelections = this.state.dropdownSelections.slice();\n        newSelections[0] = newValue.value;\n        console.log(newValue);\n        this.setState({dropdownSelections:newSelections});\n    }\n    onDropdown2Changed(newValue) {\n        let newSelections = this.state.dropdownSelections.slice();\n        newSelections[1] = newValue.value;\n        this.setState({dropdownSelections:newSelections});\n    }\n    onDropdown3Changed(newValue) {\n        let newSelections = this.state.dropdownSelections.slice();\n        newSelections[2] = newValue.value;\n        this.setState({dropdownSelections:newSelections});\n    }\n\n    render() {\n        let cards = this.props.cards;\n        let selectedNames = this.props.selectedCards.map(card => card.char_name);\n\n        let processedCardsAll = processCards(cards, this.props.weights, this.props.selectedCards);\n\n        if(this.props.weights.type > -1) {\n            cards = cards.filter(e => e.type === this.props.weights.type);\n        }\n        \n        let processedCards = processCards(cards, this.props.weights, this.props.selectedCards);\n    \n        if (processedCards.length === 0) {\n            return <div className=\"tier-list\"></div>;\n        }\n    \n        let rows = [[]];\n        let current_row = 0;\n        let step = (processedCards[0].score - processedCards[processedCards.length - 1].score) / 7;\n        let boundary = processedCards[0].score - step;\n    \n        for (let i = 0; i < processedCards.length; i++) {\n            while (processedCards[i].score < boundary - 1) {\n                rows.push([]);\n                current_row++;\n                boundary -= step;\n            }\n    \n            rows[current_row].push((\n                <SupportCard\n                    id={processedCards[i].id}\n                    lb={processedCards[i].lb}\n                    score={processedCards[i].score}\n                    key={processedCards[i].id + \"LB\" + processedCards[i].lb}\n                    info={processedCards[i].info}\n                    charName={processedCards[i].char_name}\n                    selected={selectedNames}\n                    card={cards.find((c) => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb)}\n                    onClick={() => this.props.cardSelected(cards.find((c) => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb))}\n                    stats={this.state.dropdownSelections}\n                />\n            ));\n        }\n\n        let finalScores = processScores(processedCardsAll, this.props.weights, this.props.selectedCards)\n        let tiers = [];\n    \n        for (let i = 0; i < 7; i++) {\n            tiers.push(\n                <div className=\"tier\" key={tierNames[i]}>\n                    <div className=\"tier-letter\">{tierNames[i]}</div>\n                    <div className=\"tier-images\">{rows[i]}</div>\n                </div>\n            )\n        }\n    \n        let count = this.props.selectedCards.filter((c) => c.type == this.props.weights.type).length;\n        let dropdownOptions = [{value:\"none\", label:\"None\"}];\n        let properties = Object.keys(supportCardProperties).sort();\n        for (let i = 0; i < properties.length; i++) {\n            dropdownOptions.push({\n                value:properties[i],\n                label:supportCardProperties[properties[i]].friendly_name\n            });\n        }\n    \n        return (\n            <div className=\"tier-list\">\n                \n                <div className=\"selectors\">\n                    \n                    <span className=\"selectLabel\">Show Stats:</span>\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown1Changed} defaultValue={{value:\"none\", label:\"None\"}}/>\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown2Changed} defaultValue={{value:\"none\", label:\"None\"}}/>\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown3Changed} defaultValue={{value:\"none\", label:\"None\"}}/>\n                </div>\n                {tiers}\n            </div>\n        );\n    }\n}\n\nconst tierNames = ['S', 'A', 'B', 'C', 'D', 'E', 'F']\nfunction processCards(cards, weights, selectedCards) {\n    let processedCards = [];\n    selectedCards = selectedCards.slice();\n    \n    // Calculate some stuff here so we don't have to do it a million times later\n    for (let card = 0; card < selectedCards.length; card++) {\n        let selectedCard = selectedCards[card];\n        selectedCard.index = card;\n    }\n\n    for (let i = 0; i < cards.length; i++) {\n        let info = {};\n        let card = JSON.parse(JSON.stringify(cards[i]));\n        card.index = 6;\n\n        // Add starting stats and stats from events\n        let score = 0;\n        let statGains = card.start_b;\n\n        info.type = card.type;\n        info.start_b = card.start_b;\n        info.pb = card.pb;\n        info.spRate = card.sp_r;\n        info.spp = card.spp;\n        info.pb = card.pb;\n\n        if (card.type === 0) {\n            statGains += card.lb * weights.vocalLessons[1];\n        } else if (card.type === 1) {\n            statGains += card.lb * weights.danceLessons[1];\r\n        } else {\n            statGains += card.lb * weights.visualLessons[1];\r\n        }\n\n        if (card.type === 0) {\n            statGains += card.sp_lb * weights.vocalLessons[2];\n        } else if (card.type === 1) {\n            statGains += card.sp_lb * weights.danceLessons[2];\r\n        } else {\n            statGains += card.sp_lb * weights.visualLessons[2];\r\n        }\n\n        statGains += card.rest_b * weights.rest;\n        statGains += card.gb * weights.gift;\n        statGains += card.db * weights.date;\n        statGains += card.sb * weights.shop;\n        statGains += card.cb * weights.classroom;\n        statGains += card.pdb * weights.drink;\n        statGains += card.mb;\n        \n        statGains += card.ub * weights.upgrade.reduce((total, current) => total + current, 0);\n        statGains += card.m_ub * weights.upgrade[1];\n\n        statGains += card.a_cb * weights.cardAcq[0];\n        statGains += card.m_cb * weights.cardAcq[1];\n        statGains += card.con_cb * weights.cardAcq[2];\n\n        statGains += card.remove_b * weights.removal;\n\n        // Convert stat gains to score\n        score += statGains;\n\n        processedCards.push({\n            id: card.id,\n            lb: card.limit_break,\n            score: score,\n            info: info,\n            char_name: card.char_name\n        })\n    }\n    processedCards.sort((a, b) => b.score - a.score);\n    return processedCards;\n}\n\nfunction processScores(processedCards, weights, selectedCards) {\r\n    selectedCards = selectedCards.slice();\r\n    let startingStats = [0, 0, 0];\r\n    startingStats += weights.idolStats + weights.memStats;\r\n\r\n    let startingMult = [0, 0, 0];\r\n    startingMult += weights.idolMult + weights.memMult\r\n\r\n    let statBonus = [0, 0, 0];\r\n    let spRate = weights.spRate;\r\n    for (let card = 0; card < selectedCards.length; card++) {\r\n        let cardID = selectedCards[card].id;\r\n        let cardLB = selectedCards[card].limit_break\r\n        let type = selectedCards[card].type\r\n        let matchingCards = processedCards.find(processedCards => processedCards.id === cardID && processedCards.lb === cardLB);\r\n\r\n        startingStats[type] += matchingCards.info.start_b;\r\n        startingMult[type] += matchingCards.info.pb;\r\n\r\n        spRate += matchingCards.info.spRate;\r\n\r\n        statBonus[type] += matchingCards.score;\r\n    }\r\n    let finalScore = startingStats + statBonus;\r\n\r\n    let results = [{\r\n        startingStats: startingStats,\r\n        startingMult: startingMult,\r\n        spRate: spRate,\r\n        statBonus: statBonus,\r\n        finalScore: finalScore,\r\n    }]\r\n    console.log(results);\r\n    return results;\r\n    }\r\n   \n\nexport default TierList;\n"]},"metadata":{},"sourceType":"module"}