{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Chun\\\\GakuTest\\\\src\\\\components\\\\TierList.js\";\nimport React from 'react';\nimport SupportCard from './SupportCard';\nimport { supportCardProperties } from '../constants';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ordinal = [\"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"7th\"];\nconst type_names = [\"Voice\", \"Dance\", \"Visual\"];\n\nclass TierList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropdownSelections: [\"none\", \"none\", \"none\"]\n    };\n    this.onDropdown1Changed = this.onDropdown1Changed.bind(this);\n    this.onDropdown2Changed = this.onDropdown2Changed.bind(this);\n    this.onDropdown3Changed = this.onDropdown3Changed.bind(this);\n  } //lmao\n\n\n  onDropdown1Changed(newValue) {\n    let newSelections = this.state.dropdownSelections.slice();\n    newSelections[0] = newValue.value;\n    console.log(newValue);\n    this.setState({\n      dropdownSelections: newSelections\n    });\n  }\n\n  onDropdown2Changed(newValue) {\n    let newSelections = this.state.dropdownSelections.slice();\n    newSelections[1] = newValue.value;\n    this.setState({\n      dropdownSelections: newSelections\n    });\n  }\n\n  onDropdown3Changed(newValue) {\n    let newSelections = this.state.dropdownSelections.slice();\n    newSelections[2] = newValue.value;\n    this.setState({\n      dropdownSelections: newSelections\n    });\n  }\n\n  render() {\n    let cards = this.props.cards;\n    let selectedNames = this.props.selectedCards.map(card => card.char_name);\n\n    if (this.props.weights.type > -1) {\n      cards = cards.filter(e => e.type === this.props.weights.type);\n    }\n\n    let processedCards = processCards(cards, this.props.weights, this.props.selectedCards);\n\n    if (processedCards.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tier-list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 20\n      }, this);\n    }\n\n    let rows = [[]];\n    let current_row = 0;\n    let step = (processedCards[0].score - processedCards[processedCards.length - 1].score) / 7;\n    let boundary = processedCards[0].score - step;\n\n    for (let i = 0; i < processedCards.length; i++) {\n      while (processedCards[i].score < boundary - 1) {\n        rows.push([]);\n        current_row++;\n        boundary -= step;\n      }\n\n      rows[current_row].push( /*#__PURE__*/_jsxDEV(SupportCard, {\n        id: processedCards[i].id,\n        lb: processedCards[i].lb,\n        score: processedCards[i].score,\n        info: processedCards[i].info,\n        charName: processedCards[i].char_name,\n        selected: selectedNames,\n        card: cards.find(c => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb),\n        onClick: () => this.props.cardSelected(cards.find(c => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb)),\n        stats: this.state.dropdownSelections\n      }, processedCards[i].id + \"LB\" + processedCards[i].lb, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this));\n    }\n\n    let finalScores = processScores(processedCards, this.props.weights, this.props.selectedCards);\n    let tiers = [];\n\n    for (let i = 0; i < 7; i++) {\n      tiers.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tier\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tier-letter\",\n          children: tierNames[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tier-images\",\n          children: rows[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this)]\n      }, tierNames[i], true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this));\n    }\n\n    let count = this.props.selectedCards.filter(c => c.type == this.props.weights.type).length;\n    let dropdownOptions = [{\n      value: \"none\",\n      label: \"None\"\n    }];\n    let properties = Object.keys(supportCardProperties).sort();\n\n    for (let i = 0; i < properties.length; i++) {\n      dropdownOptions.push({\n        value: properties[i],\n        label: supportCardProperties[properties[i]].friendly_name\n      });\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tier-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selectors\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"selectLabel\",\n          children: \"Show Stats:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          className: \"select\",\n          options: dropdownOptions,\n          onChange: this.onDropdown1Changed,\n          defaultValue: {\n            value: \"none\",\n            label: \"None\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          className: \"select\",\n          options: dropdownOptions,\n          onChange: this.onDropdown2Changed,\n          defaultValue: {\n            value: \"none\",\n            label: \"None\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          className: \"select\",\n          options: dropdownOptions,\n          onChange: this.onDropdown3Changed,\n          defaultValue: {\n            value: \"none\",\n            label: \"None\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), tiers]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst tierNames = ['S', 'A', 'B', 'C', 'D', 'E', 'F'];\n\nfunction processCards(cards, weights, selectedCards) {\n  let processedCards = [];\n  selectedCards = selectedCards.slice(); // Calculate some stuff here so we don't have to do it a million times later\n\n  for (let card = 0; card < selectedCards.length; card++) {\n    let selectedCard = selectedCards[card];\n    selectedCard.index = card;\n  }\n\n  for (let i = 0; i < cards.length; i++) {\n    let info = {};\n    let card = JSON.parse(JSON.stringify(cards[i]));\n    card.index = 6; // Add starting stats and stats from events\n\n    let score = 0;\n    let statGains = card.start_b;\n    info.spRate = card.sp_r;\n    info.spp = card.spp;\n    info.pb = card.pb;\n\n    if (card.type === 0) {\n      statGains += card.lb * weights.vocalLessons[1];\n    } else if (card.type === 1) {\n      statGains += card.lb * weights.danceLessons[1];\n    } else {\n      statGains += card.lb * weights.visualLessons[1];\n    }\n\n    if (card.type === 0) {\n      statGains += card.sp_lb * weights.vocalLessons[2];\n    } else if (card.type === 1) {\n      statGains += card.sp_lb * weights.danceLessons[2];\n    } else {\n      statGains += card.sp_lb * weights.visualLessons[2];\n    }\n\n    statGains += card.rest_b * weights.rest;\n    statGains += card.gb * weights.gift;\n    statGains += card.db * weights.date;\n    statGains += card.sb * weights.shop;\n    statGains += card.cb * weights.classroom;\n    statGains += card.pdb * weights.drink;\n    statGains += card.mb;\n    statGains += card.ub * weights.upgrade.reduce((total, current) => total + current, 0);\n    statGains += card.m_ub * weights.upgrade[1];\n    statGains += card.a_cb * weights.cardAcq[0];\n    statGains += card.m_cb * weights.cardAcq[1];\n    statGains += card.con_cb * weights.cardAcq[2];\n    statGains += card.remove_b * weights.removal; // Convert stat gains to score\n\n    score += statGains;\n    processedCards.push({\n      id: card.id,\n      lb: card.limit_break,\n      score: score,\n      info: info,\n      char_name: card.char_name\n    });\n  }\n\n  processedCards.sort((a, b) => b.score - a.score);\n  return processedCards;\n}\n\nfunction processScores(processedCards, weights, selectedCards) {\n  selectedCards = selectedCards.slice();\n\n  for (let card = 0; card < selectedCards.length; card++) {\n    let cardID = selectedCards[card].id;\n    let cardLB = selectedCards[card].limit_break;\n    console.log(\"Card No:\", card);\n    console.log(\"Processed Cards:\", processedCards);\n    console.log(\"Searching for:\", {\n      cardID,\n      cardLB\n    });\n    let matchingCard = processedCards.find(processedCard => processedCard.id === cardID && processedCard.limit_break === cardLB);\n    console.log(matchingCard.id);\n    console.log(matchingCard.lb);\n  }\n\n  let tests = 5;\n  return tests;\n}\n\nexport default TierList;","map":{"version":3,"sources":["C:/Users/Chun/GakuTest/src/components/TierList.js"],"names":["React","SupportCard","supportCardProperties","Select","ordinal","type_names","TierList","Component","constructor","props","state","dropdownSelections","onDropdown1Changed","bind","onDropdown2Changed","onDropdown3Changed","newValue","newSelections","slice","value","console","log","setState","render","cards","selectedNames","selectedCards","map","card","char_name","weights","type","filter","e","processedCards","processCards","length","rows","current_row","step","score","boundary","i","push","id","lb","info","find","c","limit_break","cardSelected","finalScores","processScores","tiers","tierNames","count","dropdownOptions","label","properties","Object","keys","sort","friendly_name","selectedCard","index","JSON","parse","stringify","statGains","start_b","spRate","sp_r","spp","pb","vocalLessons","danceLessons","visualLessons","sp_lb","rest_b","rest","gb","gift","db","date","sb","shop","cb","classroom","pdb","drink","mb","ub","upgrade","reduce","total","current","m_ub","a_cb","cardAcq","m_cb","con_cb","remove_b","removal","a","b","cardID","cardLB","matchingCard","processedCard","tests"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SupportCard from './SupportCard';\nimport { supportCardProperties } from '../constants';\nimport Select from 'react-select';\n\nconst ordinal = [\"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"7th\"];\nconst type_names = [\"Voice\", \"Dance\", \"Visual\"];\n\nclass TierList extends React.Component {\n    constructor (props) {\n        super(props);\n\n        this.state = {\n            dropdownSelections: [\"none\",\"none\",\"none\"]\n        }\n\n        this.onDropdown1Changed = this.onDropdown1Changed.bind(this);\n        this.onDropdown2Changed = this.onDropdown2Changed.bind(this);\n        this.onDropdown3Changed = this.onDropdown3Changed.bind(this);\n    }\n\n    //lmao\n    onDropdown1Changed(newValue) {\n        let newSelections = this.state.dropdownSelections.slice();\n        newSelections[0] = newValue.value;\n        console.log(newValue);\n        this.setState({dropdownSelections:newSelections});\n    }\n    onDropdown2Changed(newValue) {\n        let newSelections = this.state.dropdownSelections.slice();\n        newSelections[1] = newValue.value;\n        this.setState({dropdownSelections:newSelections});\n    }\n    onDropdown3Changed(newValue) {\n        let newSelections = this.state.dropdownSelections.slice();\n        newSelections[2] = newValue.value;\n        this.setState({dropdownSelections:newSelections});\n    }\n\n    render() {\n        let cards = this.props.cards;\n        let selectedNames = this.props.selectedCards.map(card => card.char_name);\n\n        if(this.props.weights.type > -1) {\n            cards = cards.filter(e => e.type === this.props.weights.type);\n        }\n        \n        let processedCards = processCards(cards, this.props.weights, this.props.selectedCards);\n    \n        if (processedCards.length === 0) {\n            return <div className=\"tier-list\"></div>;\n        }\n    \n        let rows = [[]];\n        let current_row = 0;\n        let step = (processedCards[0].score - processedCards[processedCards.length - 1].score) / 7;\n        let boundary = processedCards[0].score - step;\n    \n        for (let i = 0; i < processedCards.length; i++) {\n            while (processedCards[i].score < boundary - 1) {\n                rows.push([]);\n                current_row++;\n                boundary -= step;\n            }\n    \n            rows[current_row].push((\n                <SupportCard\n                    id={processedCards[i].id}\n                    lb={processedCards[i].lb}\n                    score={processedCards[i].score}\n                    key={processedCards[i].id + \"LB\" + processedCards[i].lb}\n                    info={processedCards[i].info}\n                    charName={processedCards[i].char_name}\n                    selected={selectedNames}\n                    card={cards.find((c) => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb)}\n                    onClick={() => this.props.cardSelected(cards.find((c) => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb))}\n                    stats={this.state.dropdownSelections}\n                />\n            ));\n        }\n\n        let finalScores = processScores(processedCards, this.props.weights, this.props.selectedCards)\n        let tiers = [];\n    \n        for (let i = 0; i < 7; i++) {\n            tiers.push(\n                <div className=\"tier\" key={tierNames[i]}>\n                    <div className=\"tier-letter\">{tierNames[i]}</div>\n                    <div className=\"tier-images\">{rows[i]}</div>\n                </div>\n            )\n        }\n    \n        let count = this.props.selectedCards.filter((c) => c.type == this.props.weights.type).length;\n        let dropdownOptions = [{value:\"none\", label:\"None\"}];\n        let properties = Object.keys(supportCardProperties).sort();\n        for (let i = 0; i < properties.length; i++) {\n            dropdownOptions.push({\n                value:properties[i],\n                label:supportCardProperties[properties[i]].friendly_name\n            });\n        }\n    \n        return (\n            <div className=\"tier-list\">\n                \n                <div className=\"selectors\">\n                    \n                    <span className=\"selectLabel\">Show Stats:</span>\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown1Changed} defaultValue={{value:\"none\", label:\"None\"}}/>\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown2Changed} defaultValue={{value:\"none\", label:\"None\"}}/>\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown3Changed} defaultValue={{value:\"none\", label:\"None\"}}/>\n                </div>\n                {tiers}\n            </div>\n        );\n    }\n}\n\nconst tierNames = ['S', 'A', 'B', 'C', 'D', 'E', 'F']\nfunction processCards(cards, weights, selectedCards) {\n    let processedCards = [];\n    selectedCards = selectedCards.slice();\n    \n    // Calculate some stuff here so we don't have to do it a million times later\n    for (let card = 0; card < selectedCards.length; card++) {\n        let selectedCard = selectedCards[card];\n        selectedCard.index = card;\n    }\n\n    for (let i = 0; i < cards.length; i++) {\n        let info = {};\n        let card = JSON.parse(JSON.stringify(cards[i]));\n        card.index = 6;\n\n        // Add starting stats and stats from events\n        let score = 0;\n        let statGains = card.start_b;\n\n        info.spRate = card.sp_r;\n        info.spp = card.spp;\n        info.pb = card.pb;\n\n        if (card.type === 0) {\n            statGains += card.lb * weights.vocalLessons[1];\n        } else if (card.type === 1) {\n            statGains += card.lb * weights.danceLessons[1];\r\n        } else {\n            statGains += card.lb * weights.visualLessons[1];\r\n        }\n\n        if (card.type === 0) {\n            statGains += card.sp_lb * weights.vocalLessons[2];\n        } else if (card.type === 1) {\n            statGains += card.sp_lb * weights.danceLessons[2];\r\n        } else {\n            statGains += card.sp_lb * weights.visualLessons[2];\r\n        }\n\n        statGains += card.rest_b * weights.rest;\n        statGains += card.gb * weights.gift;\n        statGains += card.db * weights.date;\n        statGains += card.sb * weights.shop;\n        statGains += card.cb * weights.classroom;\n        statGains += card.pdb * weights.drink;\n        statGains += card.mb;\n        \n        statGains += card.ub * weights.upgrade.reduce((total, current) => total + current, 0);\n        statGains += card.m_ub * weights.upgrade[1];\n\n        statGains += card.a_cb * weights.cardAcq[0];\n        statGains += card.m_cb * weights.cardAcq[1];\n        statGains += card.con_cb * weights.cardAcq[2];\n\n        statGains += card.remove_b * weights.removal;\n\n        // Convert stat gains to score\n        score += statGains;\n\n        processedCards.push({\n            id: card.id,\n            lb: card.limit_break,\n            score: score,\n            info: info,\n            char_name: card.char_name\n        })\n    }\n\n    processedCards.sort((a, b) => b.score - a.score);\n    return processedCards;\n}\n\nfunction processScores(processedCards, weights, selectedCards) {\r\n    selectedCards = selectedCards.slice();\r\n    for (let card = 0; card < selectedCards.length; card++) {\r\n        let cardID = selectedCards[card].id;\r\n        let cardLB = selectedCards[card].limit_break\r\n        console.log(\"Card No:\", card);\r\n        console.log(\"Processed Cards:\", processedCards);\r\n        console.log(\"Searching for:\", { cardID, cardLB });\r\n        let matchingCard = processedCards.find(processedCard => processedCard.id === cardID && processedCard.limit_break === cardLB);\r\n        console.log(matchingCard.id);\r\n        console.log(matchingCard.lb);\r\n    }\r\n    let tests = 5;\r\n    \r\n    return tests;\r\n}\n\nexport default TierList;\n"]},"metadata":{},"sourceType":"module"}