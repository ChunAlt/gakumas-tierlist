{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Chun\\\\GakuTest\\\\src\\\\components\\\\TierList.js\";\nimport React from 'react';\nimport SupportCard from './SupportCard';\nimport { supportCardProperties } from '../constants';\nimport Select from 'react-select';\nimport allCards from '../cards';\nimport VoiceIcon from '../icons/utx_ico_obtain_00.png';\nimport DanceIcon from '../icons/utx_ico_obtain_01.png';\nimport VisualIcon from '../icons/utx_ico_obtain_02.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ordinal = [\"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"7th\"];\nconst type_names = [\"Voice\", \"Dance\", \"Visual\"];\nconst type_to_icon = [VoiceIcon, DanceIcon, VisualIcon];\n\nclass TierList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropdownSelections: [\"none\", \"none\", \"none\"]\n    };\n    this.onDropdown1Changed = this.onDropdown1Changed.bind(this);\n    this.onDropdown2Changed = this.onDropdown2Changed.bind(this);\n    this.onDropdown3Changed = this.onDropdown3Changed.bind(this);\n    this.onToggleResults = this.onToggleResults.bind(this);\n  } //lmao\n\n\n  onDropdown1Changed(newValue) {\n    let newSelections = this.state.dropdownSelections.slice();\n    newSelections[0] = newValue.value;\n    this.setState({\n      dropdownSelections: newSelections\n    });\n  }\n\n  onDropdown2Changed(newValue) {\n    let newSelections = this.state.dropdownSelections.slice();\n    newSelections[1] = newValue.value;\n    this.setState({\n      dropdownSelections: newSelections\n    });\n  }\n\n  onDropdown3Changed(newValue) {\n    let newSelections = this.state.dropdownSelections.slice();\n    newSelections[2] = newValue.value;\n    this.setState({\n      dropdownSelections: newSelections\n    });\n  }\n\n  onToggleResults(event) {\n    this.setState({\n      show: !this.state.show\n    });\n  }\n\n  render() {\n    let cards = this.props.cards;\n    let selectedNames = this.props.selectedCards.map(card => card.char_name);\n    let processedCardsAll = processCards(allCards, this.props.weights, this.props.selectedCards);\n\n    if (this.props.weights.type > -1) {\n      cards = cards.filter(e => e.type === this.props.weights.type);\n      console.log(this.props.weights.type);\n    }\n\n    let processedCards = processCards(cards, this.props.weights, this.props.selectedCards);\n\n    if (processedCards.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tier-list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 20\n      }, this);\n    }\n\n    let rows = [[]];\n    let current_row = 0;\n    let step = (processedCards[0].score - processedCards[processedCards.length - 1].score) / 7;\n    let boundary = processedCards[0].score - step;\n\n    for (let i = 0; i < processedCards.length; i++) {\n      while (processedCards[i].score < boundary - 1) {\n        rows.push([]);\n        current_row++;\n        boundary -= step;\n      }\n\n      rows[current_row].push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"support-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"type-icon\",\n          name: \"type icon\",\n          src: type_to_icon[processedCards[i].info.type],\n          title: processedCards[i].info.type,\n          alt: \"card type\",\n          onClick: () => this.props.cardSelected(cards.find(c => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SupportCard, {\n          id: processedCards[i].id,\n          lb: processedCards[i].lb,\n          score: processedCards[i].score,\n          info: processedCards[i].info,\n          charName: processedCards[i].char_name,\n          selected: selectedNames,\n          card: cards.find(c => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb),\n          onClick: () => this.props.cardSelected(cards.find(c => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb)),\n          stats: this.state.dropdownSelections\n        }, processedCards[i].id + \"LB\" + processedCards[i].lb, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)]\n      }, processedCards[i].id + \"LB\" + processedCards[i].lb, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this));\n    }\n\n    let resultValues = processScores(processedCardsAll, this.props.weights, this.props.selectedCards);\n    let tiers = [];\n\n    for (let i = 0; i < 7; i++) {\n      tiers.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tier\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tier-letter\",\n          children: tierNames[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tier-images\",\n          children: rows[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this)]\n      }, tierNames[i], true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this));\n    }\n\n    let count = this.props.selectedCards.filter(c => c.type == this.props.weights.type).length;\n    let dropdownOptions = [{\n      value: \"none\",\n      label: \"None\"\n    }];\n    let properties = Object.keys(supportCardProperties).sort();\n\n    for (let i = 0; i < properties.length; i++) {\n      dropdownOptions.push({\n        value: properties[i],\n        label: supportCardProperties[properties[i]].friendly_name\n      });\n    }\n\n    const resultsTable = [[resultValues[0].startingStats[0], resultValues[0].startingStats[1], resultValues[0].startingStats[2], resultValues[0].startingStats[0] + resultValues[0].startingStats[1] + resultValues[0].startingStats[2]], [resultValues[0].startingMult[0], resultValues[0].startingMult[1], resultValues[0].startingMult[2], resultValues[0].startingMult[0] + resultValues[0].startingMult[1] + resultValues[0].startingMult[2]], [Math.round(resultValues[0].finalScore[0]), Math.round(resultValues[0].finalScore[1]), Math.round(resultValues[0].finalScore[2]), Math.round(resultValues[0].finalScore[0]) + Math.round(resultValues[0].finalScore[1]) + Math.round(resultValues[0].finalScore[2])]];\n    const rowLabels = [\"Starting  Stats\", \"Stats Multiplier\", \"Predicted Final Stats\"];\n    let results = [];\n\n    for (let i = 0; i < 1; i++) {\n      results.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weights\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weight-row\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"results-toggle\",\n            type: \"button\",\n            onClick: this.onToggleResults,\n            children: this.state.show ? \"Hide Results\" : \"Show Results\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this), this.state.show && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"number-table\",\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 156,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Vocal\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 157,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Dance\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 158,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Visual\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 159,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Total\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 160,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: resultsTable.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: rowLabels[rowIndex]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 166,\n                    columnNumber: 49\n                  }, this), row.map((num, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: rowIndex === 1 ? `${num}%` : num\n                  }, colIndex, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 168,\n                    columnNumber: 53\n                  }, this))]\n                }, rowIndex, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 165,\n                  columnNumber: 45\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 29\n          }, this)\n        }, void 0, false)]\n      }, resultValues[0].finalScore[0], true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tier-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-explanation\",\n        children: results\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selectors\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"selectLabel\",\n          children: \"Show Stats:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          className: \"select\",\n          options: dropdownOptions,\n          onChange: this.onDropdown1Changed,\n          defaultValue: {\n            value: \"none\",\n            label: \"None\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          className: \"select\",\n          options: dropdownOptions,\n          onChange: this.onDropdown2Changed,\n          defaultValue: {\n            value: \"none\",\n            label: \"None\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          className: \"select\",\n          options: dropdownOptions,\n          onChange: this.onDropdown3Changed,\n          defaultValue: {\n            value: \"none\",\n            label: \"None\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"label\",\n        children: [\"Cards are ordered within tiers, but tiers are relatively arbitrary since I just used the Uma setting. \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 119\n        }, this), \"Asari cards ruin literally everything I've done because I forgot they existed, and thus, will not be implemented for now.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this), tiers]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst tierNames = ['S', 'A', 'B', 'C', 'D', 'E', 'F'];\n\nfunction processCards(cards, weights, selectedCards) {\n  let processedCards = [];\n  selectedCards = selectedCards.slice(); // Calculate some stuff here so we don't have to do it a million times later\n\n  for (let card = 0; card < selectedCards.length; card++) {\n    let selectedCard = selectedCards[card];\n    selectedCard.index = card;\n  }\n\n  for (let i = 0; i < cards.length; i++) {\n    let info = {};\n    let card = JSON.parse(JSON.stringify(cards[i]));\n    card.index = 6; // Add starting stats and stats from events\n\n    let score = 0;\n    let statGains = card.start_b;\n    info.type = card.type;\n    info.start_b = card.start_b;\n    info.pb = card.pb;\n    info.spRate = card.sp_r;\n    info.spp = card.spp;\n\n    if (card.type === 0) {\n      statGains += card.pb * weights.vocalLessons[0];\n    } else if (card.type === 1) {\n      statGains += card.pb * weights.danceLessons[0];\n    } else {\n      statGains += card.pb * weights.visualLessons[0];\n    }\n\n    if (card.type === 0) {\n      statGains += card.lb * weights.vocalLessons[1];\n    } else if (card.type === 1) {\n      statGains += card.lb * weights.danceLessons[1];\n    } else {\n      statGains += card.lb * weights.visualLessons[1];\n    }\n\n    if (card.type === 0) {\n      statGains += card.sp_lb * weights.vocalLessons[2];\n    } else if (card.type === 1) {\n      statGains += card.sp_lb * weights.danceLessons[2];\n    } else {\n      statGains += card.sp_lb * weights.visualLessons[2];\n    }\n\n    if (card.type === 0) {\n      statGains += card.n_lb * weights.vocalLessons[3];\n    } else if (card.type === 1) {\n      statGains += card.n_lb * weights.danceLessons[3];\n    } else {\n      statGains += card.n_lb * weights.visualLessons[3];\n    }\n\n    statGains += card.rest_b * weights.rest;\n    statGains += card.gb * weights.gift;\n    statGains += card.db * weights.date;\n    statGains += card.sb * weights.shop;\n    statGains += card.cb * weights.classroom;\n    statGains += card.pdb * weights.drink;\n    statGains += card.mb;\n    statGains += card.ub * weights.upgrade.reduce((total, current) => total + current, 0);\n    statGains += card.m_ub * weights.upgrade[1];\n    statGains += card.a_cb * weights.cardAcq[0];\n    statGains += card.m_cb * weights.cardAcq[1];\n    statGains += card.con_cb * weights.cardAcq[2];\n    statGains += card.remove_b * weights.removal; // Convert stat gains to score\n\n    score += statGains;\n    processedCards.push({\n      id: card.id,\n      lb: card.limit_break,\n      score: score,\n      info: info,\n      char_name: card.char_name\n    });\n  }\n\n  processedCards.sort((a, b) => b.score - a.score);\n  return processedCards;\n}\n\nfunction processScores(processedCards, weights, selectedCards) {\n  selectedCards = selectedCards.slice();\n  let startingStats = [0, 0, 0];\n  startingStats = startingStats.map((stat, index) => stat + weights.idolStats[index] + weights.memStats[index]);\n  let idolMemMult = [0, 0, 0];\n  idolMemMult = idolMemMult.map((stat, index) => stat + weights.idolMult[index] + weights.memMult[index]);\n  let startingMult = idolMemMult;\n  let cardBonus = [0, 0, 0];\n  let cardStartBonus = [0, 0, 0];\n  let spRate = weights.spRate;\n\n  for (let card = 0; card < selectedCards.length; card++) {\n    let cardID = selectedCards[card].id;\n    let cardLB = selectedCards[card].limit_break;\n    let type = selectedCards[card].type;\n    let matchingCards = processedCards.find(processedCards => processedCards.id === cardID && processedCards.lb === cardLB);\n    startingStats[type] += matchingCards.info.start_b;\n    startingMult[type] += matchingCards.info.pb * 100;\n    spRate += matchingCards.info.spRate;\n    cardBonus[type] += matchingCards.score;\n    cardStartBonus[type] += matchingCards.info.start_b;\n  }\n\n  let examBonus = 50;\n  let lessonGain = [(1 + idolMemMult[0] / 100) * weights.vocalLessons[0], (1 + idolMemMult[1] / 100) * weights.danceLessons[0], (1 + idolMemMult[2] / 100) * weights.visualLessons[0]];\n  let finalScore = startingStats.map((stat, index) => stat + cardBonus[index] + lessonGain[index] + weights.classroomStats[index] + examBonus - cardStartBonus[index]);\n  let roundedScore = Object.fromEntries(Object.entries(finalScore).map(_ref => {\n    let [key, value] = _ref;\n    return [key, Math.min(value, weights.statCap)];\n  }));\n  let results = [{\n    startingStats: startingStats,\n    startingMult: startingMult,\n    spRate: spRate,\n    cardBonus: cardBonus,\n    finalScore: roundedScore\n  }];\n  return results;\n}\n\nexport default TierList;","map":{"version":3,"sources":["C:/Users/Chun/GakuTest/src/components/TierList.js"],"names":["React","SupportCard","supportCardProperties","Select","allCards","VoiceIcon","DanceIcon","VisualIcon","ordinal","type_names","type_to_icon","TierList","Component","constructor","props","state","dropdownSelections","onDropdown1Changed","bind","onDropdown2Changed","onDropdown3Changed","onToggleResults","newValue","newSelections","slice","value","setState","event","show","render","cards","selectedNames","selectedCards","map","card","char_name","processedCardsAll","processCards","weights","type","filter","e","console","log","processedCards","length","rows","current_row","step","score","boundary","i","push","info","cardSelected","find","c","id","limit_break","lb","resultValues","processScores","tiers","tierNames","count","dropdownOptions","label","properties","Object","keys","sort","friendly_name","resultsTable","startingStats","startingMult","Math","round","finalScore","rowLabels","results","row","rowIndex","num","colIndex","selectedCard","index","JSON","parse","stringify","statGains","start_b","pb","spRate","sp_r","spp","vocalLessons","danceLessons","visualLessons","sp_lb","n_lb","rest_b","rest","gb","gift","db","date","sb","shop","cb","classroom","pdb","drink","mb","ub","upgrade","reduce","total","current","m_ub","a_cb","cardAcq","m_cb","con_cb","remove_b","removal","a","b","stat","idolStats","memStats","idolMemMult","idolMult","memMult","cardBonus","cardStartBonus","cardID","cardLB","matchingCards","examBonus","lessonGain","classroomStats","roundedScore","fromEntries","entries","key","min","statCap"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport SupportCard from './SupportCard';\r\nimport { supportCardProperties } from '../constants';\r\nimport Select from 'react-select';\r\nimport allCards from '../cards';\r\nimport VoiceIcon from '../icons/utx_ico_obtain_00.png';\r\nimport DanceIcon from '../icons/utx_ico_obtain_01.png';\r\nimport VisualIcon from '../icons/utx_ico_obtain_02.png';\r\n\r\nconst ordinal = [\"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"7th\"];\r\nconst type_names = [\"Voice\", \"Dance\", \"Visual\"];\r\n\r\nconst type_to_icon = [\r\n    VoiceIcon,\r\n    DanceIcon,\r\n    VisualIcon,\r\n]\r\n\r\nclass TierList extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            dropdownSelections: [\"none\",\"none\",\"none\"]\r\n        }\r\n\r\n        this.onDropdown1Changed = this.onDropdown1Changed.bind(this);\r\n        this.onDropdown2Changed = this.onDropdown2Changed.bind(this);\r\n        this.onDropdown3Changed = this.onDropdown3Changed.bind(this);\r\n        this.onToggleResults = this.onToggleResults.bind(this);\r\n    }\r\n\r\n    //lmao\r\n    onDropdown1Changed(newValue) {\r\n        let newSelections = this.state.dropdownSelections.slice();\r\n        newSelections[0] = newValue.value;\r\n        this.setState({dropdownSelections:newSelections});\r\n    }\r\n    onDropdown2Changed(newValue) {\r\n        let newSelections = this.state.dropdownSelections.slice();\r\n        newSelections[1] = newValue.value;\r\n        this.setState({dropdownSelections:newSelections});\r\n    }\r\n    onDropdown3Changed(newValue) {\r\n        let newSelections = this.state.dropdownSelections.slice();\r\n        newSelections[2] = newValue.value;\r\n        this.setState({dropdownSelections:newSelections});\r\n    }\r\n\r\n    onToggleResults(event) {\r\n        this.setState({ show: !this.state.show });\r\n    }\r\n\r\n    render() {\r\n        let cards = this.props.cards;\r\n        let selectedNames = this.props.selectedCards.map(card => card.char_name);\r\n        let processedCardsAll = processCards(allCards, this.props.weights, this.props.selectedCards);\r\n\r\n        if (this.props.weights.type > -1) {\r\n            cards = cards.filter(e => e.type === this.props.weights.type);\r\n            console.log(this.props.weights.type)\r\n        }\r\n\r\n        let processedCards = processCards(cards, this.props.weights, this.props.selectedCards);\r\n\r\n        if (processedCards.length === 0) {\r\n            return <div className=\"tier-list\"></div>;\r\n        }\r\n\r\n        let rows = [[]];\r\n        let current_row = 0;\r\n        let step = (processedCards[0].score - processedCards[processedCards.length - 1].score) / 7;\r\n        let boundary = processedCards[0].score - step;\r\n\r\n        for (let i = 0; i < processedCards.length; i++) {\r\n            while (processedCards[i].score < boundary - 1) {\r\n                rows.push([]);\r\n                current_row++;\r\n                boundary -= step;\r\n            }\r\n\r\n            rows[current_row].push((\r\n                <div key = { processedCards[i].id + \"LB\" + processedCards[i].lb } className=\"support-card\">\r\n                    <img\r\n                        className=\"type-icon\"\r\n                        name=\"type icon\"\r\n                        src={type_to_icon[processedCards[i].info.type]}\r\n                        title={processedCards[i].info.type}\r\n                        alt=\"card type\"\r\n                        onClick={() => this.props.cardSelected(cards.find((c) => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb))}\r\n                    />\r\n                    <SupportCard\r\n                        id={processedCards[i].id}\r\n                        lb={processedCards[i].lb}\r\n                        score={processedCards[i].score}\r\n                        key={processedCards[i].id + \"LB\" + processedCards[i].lb}\r\n                        info={processedCards[i].info}\r\n                        charName={processedCards[i].char_name}\r\n                        selected={selectedNames}\r\n                        card={cards.find((c) => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb)}\r\n                        onClick={() => this.props.cardSelected(cards.find((c) => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb))}\r\n                        stats={this.state.dropdownSelections}\r\n                    />\r\n                </div>\r\n            ));\r\n        }\r\n\r\n\r\n        let resultValues = processScores(processedCardsAll, this.props.weights, this.props.selectedCards);\r\n\r\n        let tiers = [];\r\n\r\n        for (let i = 0; i < 7; i++) {\r\n            tiers.push(\r\n                <div className=\"tier\" key={tierNames[i]}>\r\n                    <div className=\"tier-letter\">{tierNames[i]}</div>\r\n                    <div className=\"tier-images\">{rows[i]}</div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        let count = this.props.selectedCards.filter((c) => c.type == this.props.weights.type).length;\r\n        let dropdownOptions = [{ value: \"none\", label: \"None\" }];\r\n        let properties = Object.keys(supportCardProperties).sort();\r\n        for (let i = 0; i < properties.length; i++) {\r\n            dropdownOptions.push({\r\n                value: properties[i],\r\n                label: supportCardProperties[properties[i]].friendly_name\r\n            });\r\n        }\r\n\r\n        const resultsTable = [\r\n            [resultValues[0].startingStats[0], resultValues[0].startingStats[1], resultValues[0].startingStats[2], resultValues[0].startingStats[0] + resultValues[0].startingStats[1] + resultValues[0].startingStats[2]],\r\n            [resultValues[0].startingMult[0], resultValues[0].startingMult[1], resultValues[0].startingMult[2], resultValues[0].startingMult[0] + resultValues[0].startingMult[1] + resultValues[0].startingMult[2]],\r\n            [Math.round(resultValues[0].finalScore[0]), Math.round(resultValues[0].finalScore[1]), Math.round(resultValues[0].finalScore[2]), Math.round(resultValues[0].finalScore[0]) + Math.round(resultValues[0].finalScore[1]) + Math.round(resultValues[0].finalScore[2])],\r\n        ];\r\n\r\n        const rowLabels = [\"Starting  Stats\", \"Stats Multiplier\", \"Predicted Final Stats\"];\r\n\r\n        let results = [];\r\n\r\n\r\n        for (let i = 0; i < 1; i++) {\r\n            results.push(\r\n                <div className=\"weights\" key={resultValues[0].finalScore[0]}>\r\n                    <div className=\"weight-row\">\r\n                        <button id=\"results-toggle\" type=\"button\" onClick={this.onToggleResults}>{this.state.show ? \"Hide Results\" : \"Show Results\"}</button>\r\n                    </div>\r\n                    {\r\n                        this.state.show &&\r\n                        <>\r\n                            <div className=\"number-table\">\r\n                                <table>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th></th>\r\n                                            <th>Vocal</th>\r\n                                            <th>Dance</th>\r\n                                            <th>Visual</th>\r\n                                            <th>Total</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {resultsTable.map((row, rowIndex) => (\r\n                                            <tr key={rowIndex}>\r\n                                                <td>{rowLabels[rowIndex]}</td> \r\n                                                {row.map((num, colIndex) => (\r\n                                                    <td key={colIndex}>\r\n                                                        {rowIndex === 1 ? `${num}%` : num}\r\n                                                    </td>\r\n                                                ))}\r\n                                            </tr>\r\n                                        ))}\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </>\r\n                    }\r\n                </div>\r\n            );\r\n        }\r\n\r\n\r\n\r\n        return (\r\n            <div className=\"tier-list\">\r\n                <div className=\"section-explanation\">\r\n                    {results}\r\n                </div>\r\n                <div className=\"selectors\">\r\n                    <span className=\"selectLabel\">Show Stats:</span>\r\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown1Changed} defaultValue={{ value: \"none\", label: \"None\" }} />\r\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown2Changed} defaultValue={{ value: \"none\", label: \"None\" }} />\r\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown3Changed} defaultValue={{ value: \"none\", label: \"None\" }} />\r\n                </div>\r\n                <span className=\"label\">\r\n                Cards are ordered within tiers, but tiers are relatively arbitrary since I just used the Uma setting. <br />\r\n                    Asari cards ruin literally everything I've done because I forgot they existed, and thus, will not be implemented for now. \r\n                </span>\r\n                {tiers}\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nconst tierNames = ['S', 'A', 'B', 'C', 'D', 'E', 'F']\r\nfunction processCards(cards, weights, selectedCards) {\r\n    \r\n    let processedCards = [];\r\n    selectedCards = selectedCards.slice();\r\n    \r\n    // Calculate some stuff here so we don't have to do it a million times later\r\n    for (let card = 0; card < selectedCards.length; card++) {\r\n        let selectedCard = selectedCards[card];\r\n        selectedCard.index = card;\r\n    }\r\n\r\n    for (let i = 0; i < cards.length; i++) {\r\n        let info = {};\r\n        let card = JSON.parse(JSON.stringify(cards[i]));\r\n        card.index = 6;\r\n\r\n        // Add starting stats and stats from events\r\n        let score = 0;\r\n        let statGains = card.start_b;\r\n\r\n        info.type = card.type;\r\n        info.start_b = card.start_b;\r\n        info.pb = card.pb;\r\n        info.spRate = card.sp_r;\r\n        info.spp = card.spp;\r\n\r\n        if (card.type === 0) {\r\n            statGains += card.pb * weights.vocalLessons[0];\r\n        } else if (card.type === 1) {\r\n            statGains += card.pb * weights.danceLessons[0];\r\n        } else {\r\n            statGains += card.pb * weights.visualLessons[0];\r\n        }\r\n\r\n        if (card.type === 0) {\r\n            statGains += card.lb * weights.vocalLessons[1];\r\n        } else if (card.type === 1) {\r\n            statGains += card.lb * weights.danceLessons[1];\r\n        } else {\r\n            statGains += card.lb * weights.visualLessons[1];\r\n        }\r\n\r\n        if (card.type === 0) {\r\n            statGains += card.sp_lb * weights.vocalLessons[2];\r\n        } else if (card.type === 1) {\r\n            statGains += card.sp_lb * weights.danceLessons[2];\r\n        } else {\r\n            statGains += card.sp_lb * weights.visualLessons[2];\r\n        }\r\n\r\n        if (card.type === 0) {\r\n            statGains += card.n_lb * weights.vocalLessons[3];\r\n        } else if (card.type === 1) {\r\n            statGains += card.n_lb * weights.danceLessons[3];\r\n        } else {\r\n            statGains += card.n_lb * weights.visualLessons[3];\r\n        }\r\n\r\n        statGains += card.rest_b * weights.rest;\r\n        statGains += card.gb * weights.gift;\r\n        statGains += card.db * weights.date;\r\n        statGains += card.sb * weights.shop;\r\n        statGains += card.cb * weights.classroom;\r\n        statGains += card.pdb * weights.drink;\r\n        statGains += card.mb;\r\n        \r\n        statGains += card.ub * weights.upgrade.reduce((total, current) => total + current, 0);\r\n        statGains += card.m_ub * weights.upgrade[1];\r\n\r\n        statGains += card.a_cb * weights.cardAcq[0];\r\n        statGains += card.m_cb * weights.cardAcq[1];\r\n        statGains += card.con_cb * weights.cardAcq[2];\r\n\r\n        statGains += card.remove_b * weights.removal;\r\n\r\n        // Convert stat gains to score\r\n        score += statGains;\r\n\r\n        processedCards.push({\r\n            id: card.id,\r\n            lb: card.limit_break,\r\n            score: score,\r\n            info: info,\r\n            char_name: card.char_name\r\n        })\r\n    }\r\n    processedCards.sort((a, b) => b.score - a.score);\r\n    return processedCards;\r\n}\r\n\r\nfunction processScores(processedCards, weights, selectedCards) {\r\n    selectedCards = selectedCards.slice();\r\n    let startingStats = [0, 0, 0];\r\n    startingStats = startingStats.map((stat, index) => stat + weights.idolStats[index] + weights.memStats[index]);\r\n    \r\n\r\n    let idolMemMult = [0, 0, 0];\r\n    idolMemMult = idolMemMult.map((stat, index) => stat + weights.idolMult[index] + weights.memMult[index]);\r\n    let startingMult = idolMemMult;\r\n\r\n    let cardBonus = [0, 0, 0];\r\n    let cardStartBonus = [0, 0, 0];\r\n\r\n    let spRate = weights.spRate;\r\n    for (let card = 0; card < selectedCards.length; card++) {\r\n        let cardID = selectedCards[card].id;\r\n        let cardLB = selectedCards[card].limit_break\r\n        let type = selectedCards[card].type\r\n        let matchingCards = processedCards.find(processedCards => processedCards.id === cardID && processedCards.lb === cardLB);\r\n\r\n        startingStats[type] += matchingCards.info.start_b;\r\n        startingMult[type] += (matchingCards.info.pb*100);\r\n        \r\n        spRate += matchingCards.info.spRate;\r\n\r\n        cardBonus[type] += matchingCards.score;\r\n\r\n        cardStartBonus[type] += matchingCards.info.start_b;\r\n        \r\n    }\r\n    let examBonus = 50;\r\n    \r\n    let lessonGain = [(1 + (idolMemMult[0] / 100)) * weights.vocalLessons[0], (1 + (idolMemMult[1] / 100)) * weights.danceLessons[0], (1 + (idolMemMult[2] / 100)) * weights.visualLessons[0]]\r\n    \r\n    let finalScore = startingStats.map((stat, index) => stat + cardBonus[index] + lessonGain[index] + weights.classroomStats[index] + examBonus - cardStartBonus[index]);\r\n    let roundedScore = Object.fromEntries(\r\n        Object.entries(finalScore).map(([key, value]) => [key, Math.min(value, weights.statCap)])\r\n    );\r\n\r\n    let results = [{\r\n        startingStats: startingStats,\r\n        startingMult: startingMult,\r\n        spRate: spRate,\r\n        cardBonus: cardBonus,\r\n        finalScore: roundedScore,\r\n    }]\r\n    \r\n    return results;\r\n    }\r\n   \r\n\r\nexport default TierList;"]},"metadata":{},"sourceType":"module"}