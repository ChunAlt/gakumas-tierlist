{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Chun\\\\GakuTest\\\\src\\\\components\\\\TierList.js\";\nimport React from 'react';\nimport SupportCard from './SupportCard';\nimport events from '../card-events';\nimport { supportCardProperties } from '../constants';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ordinal = [\"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"7th\"];\nconst type_names = [\"Speed\", \"Stamina\", \"Power\", \"Guts\", \"Wisdom\", \"\", \"Friend\"];\n\nclass TierList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropdownSelections: [\"none\", \"none\", \"none\"]\n    };\n    this.onDropdown1Changed = this.onDropdown1Changed.bind(this);\n    this.onDropdown2Changed = this.onDropdown2Changed.bind(this);\n    this.onDropdown3Changed = this.onDropdown3Changed.bind(this);\n  } //lmao\n\n\n  onDropdown1Changed(newValue) {\n    let newSelections = this.state.dropdownSelections.slice();\n    newSelections[0] = newValue.value;\n    console.log(newValue);\n    this.setState({\n      dropdownSelections: newSelections\n    });\n  }\n\n  onDropdown2Changed(newValue) {\n    let newSelections = this.state.dropdownSelections.slice();\n    newSelections[1] = newValue.value;\n    this.setState({\n      dropdownSelections: newSelections\n    });\n  }\n\n  onDropdown3Changed(newValue) {\n    let newSelections = this.state.dropdownSelections.slice();\n    newSelections[2] = newValue.value;\n    this.setState({\n      dropdownSelections: newSelections\n    });\n  }\n\n  render() {\n    let cards = this.props.cards;\n    let selectedNames = this.props.selectedCards.map(card => card.char_name);\n    /*\n    if(this.props.weights.type > -1) {\n        cards = cards.filter(e => e.type === this.props.weights.type);\n    }\n    */\n\n    let processedCards = processCards(cards, this.props.weights, this.props.selectedCards);\n\n    if (processedCards.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tier-list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 20\n      }, this);\n    }\n\n    let rows = [[]];\n    let current_row = 0;\n    let step = (processedCards[0].score - processedCards[processedCards.length - 1].score) / 7;\n    let boundary = processedCards[0].score - step;\n\n    for (let i = 0; i < processedCards.length; i++) {\n      while (processedCards[i].score < boundary - 1) {\n        rows.push([]);\n        current_row++;\n        boundary -= step;\n      }\n\n      rows[current_row].push( /*#__PURE__*/_jsxDEV(SupportCard, {\n        id: processedCards[i].id,\n        lb: processedCards[i].lb,\n        score: processedCards[i].score,\n        info: processedCards[i].info,\n        charName: processedCards[i].char_name,\n        selected: selectedNames,\n        card: cards.find(c => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb),\n        onClick: () => this.props.cardSelected(cards.find(c => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb)),\n        stats: this.state.dropdownSelections\n      }, processedCards[i].id + \"LB\" + processedCards[i].lb, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this));\n    }\n\n    let tiers = [];\n\n    for (let i = 0; i < 7; i++) {\n      tiers.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tier\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tier-letter\",\n          children: tierNames[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tier-images\",\n          children: rows[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)]\n      }, tierNames[i], true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this));\n    }\n\n    let count = this.props.selectedCards.filter(c => c.type == this.props.weights.type).length;\n    let dropdownOptions = [{\n      value: \"none\",\n      label: \"None\"\n    }];\n    let properties = Object.keys(supportCardProperties).sort();\n\n    for (let i = 0; i < properties.length; i++) {\n      dropdownOptions.push({\n        value: properties[i],\n        label: supportCardProperties[properties[i]].friendly_name\n      });\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tier-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selectors\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"selectLabel\",\n          children: \"Show Stats:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          className: \"select\",\n          options: dropdownOptions,\n          onChange: this.onDropdown1Changed,\n          defaultValue: {\n            value: \"none\",\n            label: \"None\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          className: \"select\",\n          options: dropdownOptions,\n          onChange: this.onDropdown2Changed,\n          defaultValue: {\n            value: \"none\",\n            label: \"None\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          className: \"select\",\n          options: dropdownOptions,\n          onChange: this.onDropdown3Changed,\n          defaultValue: {\n            value: \"none\",\n            label: \"None\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"label\",\n        children: [\"Ranking for the \", ordinal[count], \" \", type_names[this.props.weights.type], \" card in this deck:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), tiers]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst tierNames = ['S', 'A', 'B', 'C', 'D', 'E', 'F'];\nconst raceRewards = [[2, 2, 2, 2, 2, 35], [1.6, 1.6, 1.6, 1.6, 1.6, 25], [1, 1, 1, 1, 1, 20], [13.5, 13.5, 13.5, 13.5, 13.5, 50]];\n\nfunction processCards(cards, weights, selectedCards) {\n  let processedCards = [];\n  selectedCards = selectedCards.slice(); // Calculate some stuff here so we don't have to do it a million times later\n\n  let presentTypes = [false, false, false, false, false, false, false];\n  let cardsPerType = [[], [], [], [], [], [], []];\n  let baseBondNeeded = 0;\n\n  for (let card = 0; card < selectedCards.length; card++) {\n    let selectedCard = selectedCards[card]; //let cardSpecialty = (100 + selectedCard.specialty_rate + weights.bonusSpec) * selectedCard.unique_specialty * selectedCard.fs_specialty;\n\n    let cardSpecialty = 50;\n    let cardSpecialtyPercent = cardSpecialty / (450 + cardSpecialty);\n    selectedCard.rainbowSpecialty = cardSpecialtyPercent;\n    selectedCard.offSpecialty = 100 / (450 + cardSpecialty);\n    selectedCard.cardType = selectedCard.type;\n    selectedCard.index = card;\n    presentTypes[selectedCard.cardType] = true;\n    cardsPerType[selectedCard.cardType].push(selectedCard);\n\n    if (selectedCard.cardType == 6) {\n      baseBondNeeded += 55 - selectedCard.sb;\n    } else {\n      baseBondNeeded += 75 - selectedCard.sb;\n    }\n    /*\n    if (events[selectedCard.id]) {\n        baseBondNeeded -= events[selectedCard.id][7];\n    }\n    */\n\n  }\n\n  let preferredRainbowChances = [0, 0, 0, 0, 0];\n  /*\n  for (let i = 0; i < 5; i++) {\n      if (i != weights.type) {\n          if(cardsPerType[i].length > 0) {\n              let minimum = 1;\n              if (weights.prioritize) {\n                  minimum = 2;\n              }\n              let combos = GetCombinations(cardsPerType[i], minimum);\n              if (combos.length > 0) {\n                  preferredRainbowChances[i] = combos.reduce((current, combo) => {\n                      return current += CalculateCombinationChance(combo, undefined, i);\n                  }, 0);\n              }\n          }\n      }\n  }\n  */\n\n  let chanceOfPreferredRainbow = 1 - preferredRainbowChances.reduce((current, chance) => {\n    return current * (1 - chance);\n  }, 1);\n\n  for (let i = 0; i < cards.length; i++) {\n    let info = {};\n    let card = JSON.parse(JSON.stringify(cards[i]));\n    let cardType = card.type;\n    card.index = 6;\n    let bondNeeded = baseBondNeeded;\n\n    if (cardType == 6) {\n      bondNeeded += 55 - card.sb;\n    } else {\n      bondNeeded += 75 - card.sb;\n    }\n\n    let presentTypesWithCard = presentTypes.slice();\n    presentTypesWithCard[cardType] = true;\n    let typeCount = presentTypesWithCard.filter(Boolean).length; // Add starting stats and stats from events\n\n    let score = card.sb;\n    let energyGain = 0;\n    let statGains = card.starting_stats.slice();\n    statGains.push(0);\n    info.starting_stats = card.starting_stats.slice();\n    info.event_stats = [0, 0, 0, 0, 0, 0, 0];\n\n    if (events[card.id]) {\n      info.event_stats = events[card.id].slice();\n\n      for (let stat = 0; stat < 6; stat++) {\n        statGains[stat] += events[card.id][stat] * card.effect_size_up;\n        info.event_stats[stat] = events[card.id][stat] * card.effect_size_up;\n      }\n\n      energyGain += events[card.id][6] * card.energy_up;\n      bondNeeded -= events[card.id][7];\n      score += events[card.id][7];\n    } else {\n      // Dummy event values for cards we don't yet know the events for\n      if (card.rarity === 2) {\n        // 35 total\n        for (let stat = 0; stat < 5; stat++) {\n          statGains[stat] += 7;\n        }\n\n        bondNeeded -= 5;\n      } else if (card.rarity === 3) {\n        // 45 total\n        for (let stat = 0; stat < 5; stat++) {\n          statGains[stat] += 9;\n        }\n\n        bondNeeded -= 5;\n      }\n\n      score += 5;\n    }\n\n    if (card.type_stats > 0) {\n      statGains[card.type] += card.type_stats;\n\n      for (let sc = 0; sc < selectedCards.length; sc++) {\n        if (selectedCards[sc].type < 6) {\n          statGains[selectedCards[sc].type] += card.type_stats;\n        } else {\n          statGains[0] += card.type_stats / 5;\n          statGains[1] += card.type_stats / 5;\n          statGains[2] += card.type_stats / 5;\n          statGains[3] += card.type_stats / 5;\n          statGains[4] += card.type_stats / 5;\n        }\n      }\n    }\n\n    let trainingDays = 65 - weights.races[0] - weights.races[1] - weights.races[2];\n    if (cardType === 6) trainingDays -= 5;\n    let daysToBond = bondNeeded / weights.bondPerDay;\n    let rainbowDays = trainingDays - daysToBond;\n    let specialty = (100 + card.specialty_rate + weights.bonusSpec) * card.unique_specialty * card.fs_specialty;\n    let specialtyPercent = specialty / (450 + specialty);\n    let otherPercent = 100 / (450 + specialty);\n    let offstatAppearanceDenominator = card.offstat_appearance_denominator;\n    let daysPerTraining = [0, 0, 0, 0, 0];\n    let bondedDaysPerTraining = [0, 0, 0, 0, 0];\n    let rainbowTraining = 0;\n    let rainbowOverride = 1;\n\n    if (cardType != 6) {\n      let chanceOfSingleRainbow = 0;\n      let cardsOfThisType = cardsPerType[cardType].slice();\n      card.rainbowSpecialty = specialtyPercent;\n      card.offSpecialty = otherPercent;\n      cardsOfThisType.push(card);\n\n      for (let j = 0; j < cardsOfThisType.length; j++) {\n        console.log(cardsOfThisType);\n        chanceOfSingleRainbow += CalculateCombinationChance([cardsOfThisType[j]], cardsOfThisType, cardType);\n      }\n\n      rainbowOverride = 1 - chanceOfPreferredRainbow * chanceOfSingleRainbow;\n    } // Calculate appearance rates on each training\n\n\n    for (let stat = 0; stat < 5; stat++) {\n      if (stat == cardType) {\n        rainbowTraining = specialtyPercent * rainbowDays * rainbowOverride;\n        daysPerTraining[stat] = specialtyPercent * daysToBond;\n      } else {\n        daysPerTraining[stat] = otherPercent / offstatAppearanceDenominator * daysToBond;\n        bondedDaysPerTraining[stat] = otherPercent / offstatAppearanceDenominator * rainbowDays;\n      }\n    }\n\n    if (weights.onlySummer) {\n      rainbowTraining = 8 * specialtyPercent * rainbowOverride;\n    }\n\n    if (card.fs_ramp[0] > 0) {\n      let current_bonus = 0;\n      let total = 0;\n\n      for (let j = rainbowTraining * 0.66; j > 0; j--) {\n        total += current_bonus;\n        current_bonus = Math.min(current_bonus + card.fs_ramp[0], card.fs_ramp[1]);\n      }\n\n      card.unique_fs_bonus = 1 + total / rainbowTraining / 100;\n    } // Stats from cross-training\n\n\n    info.non_rainbow_gains = [0, 0, 0, 0, 0, 0, 0];\n\n    for (let training = 0; training < 5; training++) {\n      let gains = weights.unbondedTrainingGain[training];\n      let daysOnThisTraining = daysPerTraining[training];\n      energyGain += daysOnThisTraining * gains[6] * card.energy_discount;\n      let trainingGains = CalculateCrossTrainingGain(gains, weights, card, selectedCards, training, daysOnThisTraining, typeCount, false);\n\n      for (let stat = 0; stat < 6; stat++) {\n        statGains[stat] += trainingGains[stat];\n        info.non_rainbow_gains[stat] += trainingGains[stat];\n      }\n\n      info.non_rainbow_gains[6] += daysOnThisTraining * gains[6] * card.energy_discount;\n    } // Stats from cross-training while bonded\n\n\n    for (let training = 0; training < 5; training++) {\n      let gains = weights.bondedTrainingGain[training];\n      let daysOnThisTraining = bondedDaysPerTraining[training];\n      energyGain += daysOnThisTraining * gains[6] * card.energy_discount;\n      energyGain += daysOnThisTraining * gains[6] * card.fs_energy;\n      let trainingGains = CalculateCrossTrainingGain(gains, weights, card, selectedCards, training, daysOnThisTraining, typeCount, true);\n\n      for (let stat = 0; stat < 6; stat++) {\n        statGains[stat] += trainingGains[stat];\n        info.non_rainbow_gains[stat] += trainingGains[stat];\n      }\n\n      info.non_rainbow_gains[6] += daysOnThisTraining * gains[6] * card.energy_discount;\n      info.non_rainbow_gains[6] += daysOnThisTraining * gains[6] * card.fs_energy;\n\n      if (training == 4 && card.group) {\n        energyGain += daysOnThisTraining * card.wisdom_recovery / 5;\n      }\n    }\n\n    info.rainbow_gains = [0, 0, 0, 0, 0, 0, 0]; // Stats from rainbows\n\n    if (cardType < 6) {\n      energyGain += rainbowTraining * card.wisdom_recovery;\n      let specialtyGains = weights.bondedTrainingGain[cardType];\n\n      if (weights.onlySummer) {\n        specialtyGains = weights.summerTrainingGain[cardType];\n      }\n\n      let trainingGains = CalculateTrainingGain(specialtyGains, weights, card, selectedCards, cardType, rainbowTraining, true, typeCount);\n      info.rainbow_gains = trainingGains.slice();\n      info.rainbow_gains.push(rainbowTraining * card.wisdom_recovery);\n\n      for (let stat = 0; stat < 6; stat++) {\n        statGains[stat] += trainingGains[stat];\n      }\n    }\n\n    info.race_bonus_gains = 0; // Race bonus\n\n    for (let raceType = 0; raceType < 4; raceType++) {\n      for (let stat = 0; stat < 6; stat++) {\n        statGains[stat] += raceRewards[raceType][stat] * (card.race_bonus / 100) * weights.races[raceType];\n        info.race_bonus_gains += raceRewards[raceType][stat] * (card.race_bonus / 100) * weights.races[raceType];\n      }\n    } // Convert stat gains to score\n\n\n    score += GainsToScore(statGains, weights);\n    score += energyGain * weights.stats[6];\n\n    if (weights.scenarioLink.indexOf(card.char_name) > -1) {\n      score += weights.scenarioBonus;\n    }\n\n    processedCards.push({\n      id: card.id,\n      lb: card.limit_break,\n      score: score,\n      info: info,\n      char_name: card.char_name\n    });\n  }\n\n  processedCards.sort((a, b) => b.score - a.score);\n  return processedCards;\n}\n\nfunction CalculateTrainingGain(gains, weights, card, otherCards, trainingType, days, rainbow, typeCount) {\n  let trainingGains = [0, 0, 0, 0, 0, 0, 0];\n  let trainingBonus = card.tb + card.fan_bonus * weights.fanBonus;\n  if (typeCount >= card.highlander_threshold) trainingBonus += card.highlander_training;\n  let fsBonus = 1;\n  let motivationBonus = card.mb;\n\n  if (rainbow) {\n    fsBonus = card.fs_bonus * card.unique_fs_bonus;\n    motivationBonus += card.fs_motivation;\n    trainingBonus += card.fs_training;\n  }\n\n  let soloGain = [0, 0, 0, 0, 0, 0];\n\n  for (let stat = 0; stat < 6; stat++) {\n    if (gains[stat] === 0) continue;\n    let base = gains[stat] + card.stat_bonus[stat];\n\n    if (rainbow) {\n      base += card.fs_stats[stat];\n    }\n\n    soloGain[stat] += base * trainingBonus * (1 + weights.motivation * motivationBonus) * fsBonus * 1.05 * weights.umaBonus[stat] - gains[stat];\n  }\n\n  if (GainsToScore(soloGain, weights) > weights.minimum) {\n    for (let stat = 0; stat < 6; stat++) {\n      trainingGains[stat] += soloGain[stat] * days * CalculateCombinationChance([], otherCards, trainingType) * (rainbow ? weights.multi : 1);\n    }\n  }\n\n  if (otherCards.length == 0) return trainingGains;\n  const combinations = GetCombinations(otherCards);\n\n  for (let i = 0; i < combinations.length; i++) {\n    let fullCombinationGains = [0, 0, 0, 0, 0, 0];\n    let fullTotalGains = [0, 0, 0, 0, 0, 0];\n    trainingBonus += (combinations[i].length + 1) * card.crowd_bonus;\n    const combinationTrainingBonus = combinations[i].reduce((current, c) => {\n      let training = current + (c.tb - 1) + combinations[i].length * c.crowd_bonus;\n      if (typeCount >= c.highlander_threshold) training += c.highlander_training;\n      return training;\n    }, 1);\n    const combinationFriendshipBonus = combinations[i].reduce((current, c) => {\n      if (c.cardType === trainingType) {\n        return current * c.fs_bonus * c.unique_fs_bonus;\n      } else {\n        return current;\n      }\n    }, 1);\n    const combinationMotivationBonus = combinations[i].reduce((current, c) => current + c.mb - 1, 1);\n\n    for (let stat = 0; stat < 6; stat++) {\n      if (gains[stat] === 0) continue;\n      const combinationStatBonus = combinations[i].reduce((current, c) => current + c.stat_bonus[stat], 0);\n      let base = gains[stat] + combinationStatBonus;\n\n      if (rainbow) {\n        base += card.fs_stats[stat];\n      }\n\n      let combinationGains = base * combinationTrainingBonus * (1 + weights.motivation * combinationMotivationBonus) * combinationFriendshipBonus * (1.05 * combinations[i].length) * weights.umaBonus[stat];\n      let totalGains = (base + card.stat_bonus[stat]) * (combinationTrainingBonus + trainingBonus - 1) * (1 + weights.motivation * (combinationMotivationBonus + motivationBonus - 1)) * (combinationFriendshipBonus * fsBonus) * (1.05 * (combinations[i].length + 1)) * weights.umaBonus[stat];\n      fullCombinationGains[stat] += combinationGains;\n      fullTotalGains[stat] += totalGains;\n    }\n\n    trainingBonus -= (combinations[i].length + 1) * card.crowd_bonus;\n\n    if (GainsToScore(fullTotalGains, weights) > weights.minimum) {\n      for (let stat = 0; stat < 6; stat++) {\n        trainingGains[stat] += (fullTotalGains[stat] - fullCombinationGains[stat]) * days * CalculateCombinationChance(combinations[i], otherCards, trainingType) * (rainbow ? weights.multi : 1);\n      }\n    }\n  }\n\n  return trainingGains;\n}\n\n_c = CalculateTrainingGain;\n\nfunction CalculateCrossTrainingGain(gains, weights, card, otherCards, trainingType, days, typeCount, bonded) {\n  let trainingGains = [0, 0, 0, 0, 0, 0, 0];\n  let statCards = otherCards.filter(c => c.cardType === trainingType);\n  let trainingBonus = card.tb + card.fan_bonus * weights.fanBonus;\n  if (typeCount >= card.highlander_threshold) trainingBonus += card.highlander_training;\n  let fsBonus = 1;\n\n  if (card.group && bonded) {\n    fsBonus += (card.fs_bonus + card.unique_fs_bonus - 1) / 5;\n  }\n\n  const combinations = GetCombinations(otherCards);\n\n  for (let i = 0; i < combinations.length; i++) {\n    const combination = combinations[i];\n    let fullCombinationGains = [0, 0, 0, 0, 0, 0];\n    let fullTotalGains = [0, 0, 0, 0, 0, 0];\n    trainingBonus += (combination.length + 1) * card.crowd_bonus;\n    const combinationTrainingBonus = combination.reduce((current, c) => {\n      let training = current + (c.tb - 1) + combination.length * c.crowd_bonus;\n      if (typeCount >= c.highlander_threshold) training += c.highlander_training;\n      return training;\n    }, 1);\n    const combinationFriendshipBonus = combination.reduce((current, c) => {\n      if (c.cardType === trainingType) {\n        return current * c.fs_bonus * c.unique_fs_bonus;\n      } else {\n        return current;\n      }\n    }, 1);\n    const combinationMotivationBonus = combination.reduce((current, c) => current + c.mb - 1, 1);\n\n    for (let stat = 0; stat < 6; stat++) {\n      if (gains[stat] === 0) continue;\n      if (!combination.some(r => statCards.indexOf(r) > -1)) continue;\n      const combinationStatBonus = combination.reduce((current, c) => current + c.stat_bonus[stat], 0);\n      const base = gains[stat] + combinationStatBonus;\n      let combinationGains = base * combinationTrainingBonus * (1 + weights.motivation * combinationMotivationBonus) * combinationFriendshipBonus * (1.05 * combination.length) * weights.umaBonus[stat];\n      let totalGains = 0;\n\n      if (bonded) {\n        totalGains = (base + card.stat_bonus[stat] + card.fs_stats[stat]) * (combinationTrainingBonus + trainingBonus + card.fs_training - 1) * (1 + weights.motivation * (combinationMotivationBonus + card.mb + card.fs_motivation - 1)) * (combinationFriendshipBonus * fsBonus) * (1.05 * (combination.length + 1)) * weights.umaBonus[stat];\n      } else {\n        totalGains = (base + card.stat_bonus[stat]) * (combinationTrainingBonus + trainingBonus - 1) * (1 + weights.motivation * (combinationMotivationBonus + card.mb - 1)) * (1.05 * (combination.length + 1)) * weights.umaBonus[stat];\n      }\n\n      fullCombinationGains[stat] += combinationGains;\n      fullTotalGains[stat] += totalGains;\n    }\n\n    trainingBonus -= (combination.length + 1) * card.crowd_bonus;\n\n    if (GainsToScore(fullTotalGains, weights) > weights.minimum) {\n      for (let stat = 0; stat < 6; stat++) {\n        trainingGains[stat] += (fullTotalGains[stat] - fullCombinationGains[stat]) * days * CalculateCombinationChance(combinations[i], otherCards, trainingType) * weights.multi;\n      }\n    }\n  }\n\n  return trainingGains;\n}\n\n_c2 = CalculateCrossTrainingGain;\n\nfunction GainsToScore(gains, weights) {\n  let score = 0;\n\n  for (let stat = 0; stat < 6; stat++) {\n    score += Math.min(gains[stat], weights.cap) * weights.stats[stat];\n  }\n\n  return score;\n}\n\n_c3 = GainsToScore;\n\nfunction GetCombinations(cards) {\n  let minLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  let combinations = [];\n  let temp = [];\n  const count = Math.pow(2, cards.length);\n\n  for (let i = 0; i < count; i++) {\n    temp = [];\n\n    for (let j = 0; j < cards.length; j++) {\n      if (i & Math.pow(2, j)) {\n        temp.push(cards[j]);\n      }\n    }\n\n    if (temp.length >= minLength) {\n      combinations.push(temp);\n    }\n  }\n\n  return combinations;\n}\n\n_c4 = GetCombinations;\n\nfunction CalculateCombinationChance(combination, cards, trainingType) {\n  let chance = combination.reduce((current, card) => {\n    if (card.cardType === trainingType) {\n      return current * card.rainbowSpecialty;\n    } else {\n      return current * card.offSpecialty;\n    }\n  }, 1);\n\n  if (cards) {\n    const otherCards = cards.filter(c => combination.findIndex(d => c.index == d.index) === -1);\n    chance = otherCards.reduce((current, card) => {\n      if (card.cardType === trainingType) {\n        return current * (1 - card.rainbowSpecialty);\n      } else {\n        return current * (1 - card.offSpecialty);\n      }\n    }, chance);\n  }\n\n  return chance;\n}\n\n_c5 = CalculateCombinationChance;\nexport default TierList;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"CalculateTrainingGain\");\n$RefreshReg$(_c2, \"CalculateCrossTrainingGain\");\n$RefreshReg$(_c3, \"GainsToScore\");\n$RefreshReg$(_c4, \"GetCombinations\");\n$RefreshReg$(_c5, \"CalculateCombinationChance\");","map":{"version":3,"sources":["C:/Users/Chun/GakuTest/src/components/TierList.js"],"names":["React","SupportCard","events","supportCardProperties","Select","ordinal","type_names","TierList","Component","constructor","props","state","dropdownSelections","onDropdown1Changed","bind","onDropdown2Changed","onDropdown3Changed","newValue","newSelections","slice","value","console","log","setState","render","cards","selectedNames","selectedCards","map","card","char_name","processedCards","processCards","weights","length","rows","current_row","step","score","boundary","i","push","id","lb","info","find","c","limit_break","cardSelected","tiers","tierNames","count","filter","type","dropdownOptions","label","properties","Object","keys","sort","friendly_name","raceRewards","presentTypes","cardsPerType","baseBondNeeded","selectedCard","cardSpecialty","cardSpecialtyPercent","rainbowSpecialty","offSpecialty","cardType","index","sb","preferredRainbowChances","chanceOfPreferredRainbow","reduce","current","chance","JSON","parse","stringify","bondNeeded","presentTypesWithCard","typeCount","Boolean","energyGain","statGains","starting_stats","event_stats","stat","effect_size_up","energy_up","rarity","type_stats","sc","trainingDays","races","daysToBond","bondPerDay","rainbowDays","specialty","specialty_rate","bonusSpec","unique_specialty","fs_specialty","specialtyPercent","otherPercent","offstatAppearanceDenominator","offstat_appearance_denominator","daysPerTraining","bondedDaysPerTraining","rainbowTraining","rainbowOverride","chanceOfSingleRainbow","cardsOfThisType","j","CalculateCombinationChance","onlySummer","fs_ramp","current_bonus","total","Math","min","unique_fs_bonus","non_rainbow_gains","training","gains","unbondedTrainingGain","daysOnThisTraining","energy_discount","trainingGains","CalculateCrossTrainingGain","bondedTrainingGain","fs_energy","group","wisdom_recovery","rainbow_gains","specialtyGains","summerTrainingGain","CalculateTrainingGain","race_bonus_gains","raceType","race_bonus","GainsToScore","stats","scenarioLink","indexOf","scenarioBonus","a","b","otherCards","trainingType","days","rainbow","trainingBonus","tb","fan_bonus","fanBonus","highlander_threshold","highlander_training","fsBonus","motivationBonus","mb","fs_bonus","fs_motivation","fs_training","soloGain","base","stat_bonus","fs_stats","motivation","umaBonus","minimum","multi","combinations","GetCombinations","fullCombinationGains","fullTotalGains","crowd_bonus","combinationTrainingBonus","combinationFriendshipBonus","combinationMotivationBonus","combinationStatBonus","combinationGains","totalGains","bonded","statCards","combination","some","r","cap","minLength","temp","pow","findIndex","d"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SupportCard from './SupportCard';\nimport events from '../card-events';\nimport { supportCardProperties } from '../constants';\nimport Select from 'react-select';\n\nconst ordinal = [\"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"7th\"];\nconst type_names = [\"Speed\", \"Stamina\", \"Power\", \"Guts\", \"Wisdom\", \"\", \"Friend\"];\n\nclass TierList extends React.Component {\n    constructor (props) {\n        super(props);\n\n        this.state = {\n            dropdownSelections: [\"none\",\"none\",\"none\"]\n        }\n\n        this.onDropdown1Changed = this.onDropdown1Changed.bind(this);\n        this.onDropdown2Changed = this.onDropdown2Changed.bind(this);\n        this.onDropdown3Changed = this.onDropdown3Changed.bind(this);\n    }\n\n    //lmao\n    onDropdown1Changed(newValue) {\n        let newSelections = this.state.dropdownSelections.slice();\n        newSelections[0] = newValue.value;\n        console.log(newValue);\n        this.setState({dropdownSelections:newSelections});\n    }\n    onDropdown2Changed(newValue) {\n        let newSelections = this.state.dropdownSelections.slice();\n        newSelections[1] = newValue.value;\n        this.setState({dropdownSelections:newSelections});\n    }\n    onDropdown3Changed(newValue) {\n        let newSelections = this.state.dropdownSelections.slice();\n        newSelections[2] = newValue.value;\n        this.setState({dropdownSelections:newSelections});\n    }\n\n    render() {\n        let cards = this.props.cards;\n        let selectedNames = this.props.selectedCards.map(card => card.char_name);\n\n        /*\n        if(this.props.weights.type > -1) {\n            cards = cards.filter(e => e.type === this.props.weights.type);\n        }\n        */\n\n        let processedCards = processCards(cards, this.props.weights, this.props.selectedCards);\n    \n        if (processedCards.length === 0) {\n            return <div className=\"tier-list\"></div>;\n        }\n    \n        let rows = [[]];\n        let current_row = 0;\n        let step = (processedCards[0].score - processedCards[processedCards.length - 1].score) / 7;\n        let boundary = processedCards[0].score - step;\n    \n        for (let i = 0; i < processedCards.length; i++) {\n            while (processedCards[i].score < boundary - 1) {\n                rows.push([]);\n                current_row++;\n                boundary -= step;\n            }\n    \n            rows[current_row].push((\n                <SupportCard\n                    id={processedCards[i].id}\n                    lb={processedCards[i].lb}\n                    score={processedCards[i].score}\n                    key={processedCards[i].id + \"LB\" + processedCards[i].lb}\n                    info={processedCards[i].info}\n                    charName={processedCards[i].char_name}\n                    selected={selectedNames}\n                    card={cards.find((c) => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb)}\n                    onClick={() => this.props.cardSelected(cards.find((c) => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb))}\n                    stats={this.state.dropdownSelections}\n                />\n            ));\n        }\n    \n        let tiers = [];\n    \n        for (let i = 0; i < 7; i++) {\n            tiers.push(\n                <div className=\"tier\" key={tierNames[i]}>\n                    <div className=\"tier-letter\">{tierNames[i]}</div>\n                    <div className=\"tier-images\">{rows[i]}</div>\n                </div>\n            )\n        }\n    \n        let count = this.props.selectedCards.filter((c) => c.type == this.props.weights.type).length;\n        let dropdownOptions = [{value:\"none\", label:\"None\"}];\n        let properties = Object.keys(supportCardProperties).sort();\n        for (let i = 0; i < properties.length; i++) {\n            dropdownOptions.push({\n                value:properties[i],\n                label:supportCardProperties[properties[i]].friendly_name\n            });\n        }\n    \n        return (\n            <div className=\"tier-list\">\n                <div className=\"selectors\">\n                    <span className=\"selectLabel\">Show Stats:</span>\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown1Changed} defaultValue={{value:\"none\", label:\"None\"}}/>\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown2Changed} defaultValue={{value:\"none\", label:\"None\"}}/>\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown3Changed} defaultValue={{value:\"none\", label:\"None\"}}/>\n                </div>\n                <span className=\"label\">Ranking for the {ordinal[count]} {type_names[this.props.weights.type]} card in this deck:</span>\n                {tiers}\n            </div>\n        );\n    }\n}\n\nconst tierNames = ['S', 'A', 'B', 'C', 'D', 'E', 'F']\nconst raceRewards = [\n    [2, 2, 2, 2, 2, 35],\n    [1.6, 1.6, 1.6, 1.6, 1.6, 25],\n    [1, 1, 1, 1, 1, 20],\n    [13.5,13.5,13.5,13.5,13.5,50]\n]\n\nfunction processCards(cards, weights, selectedCards) {\n    let processedCards = [];\n    selectedCards = selectedCards.slice();\n    \n    // Calculate some stuff here so we don't have to do it a million times later\n    let presentTypes = [false,false,false,false,false,false,false];\n    let cardsPerType = [[],[],[],[],[],[],[]];\n    let baseBondNeeded = 0;\n    for (let card = 0; card < selectedCards.length; card++) {\n        let selectedCard = selectedCards[card];\n        //let cardSpecialty = (100 + selectedCard.specialty_rate + weights.bonusSpec) * selectedCard.unique_specialty * selectedCard.fs_specialty;\n        let cardSpecialty = 50;\n        let cardSpecialtyPercent = (cardSpecialty) / (450 + cardSpecialty);\n        selectedCard.rainbowSpecialty = cardSpecialtyPercent;\n        selectedCard.offSpecialty = 100 / (450 + cardSpecialty);\n        selectedCard.cardType = selectedCard.type;\n        selectedCard.index = card;\n        presentTypes[selectedCard.cardType] = true;\n        cardsPerType[selectedCard.cardType].push(selectedCard);\n        if (selectedCard.cardType == 6) {\n            baseBondNeeded += 55 - selectedCard.sb\n        } else {\n            baseBondNeeded += 75 - selectedCard.sb\n        }\n        /*\n        if (events[selectedCard.id]) {\n            baseBondNeeded -= events[selectedCard.id][7];\n        }\n        */\n    }\n\n    \n    let preferredRainbowChances = [0, 0, 0, 0, 0];\n    /*\n    for (let i = 0; i < 5; i++) {\n        if (i != weights.type) {\n            if(cardsPerType[i].length > 0) {\n                let minimum = 1;\n                if (weights.prioritize) {\n                    minimum = 2;\n                }\n                let combos = GetCombinations(cardsPerType[i], minimum);\n                if (combos.length > 0) {\n                    preferredRainbowChances[i] = combos.reduce((current, combo) => {\n                        return current += CalculateCombinationChance(combo, undefined, i);\n                    }, 0);\n                }\n            }\n        }\n    }\n    */\n\n    let chanceOfPreferredRainbow = 1 - preferredRainbowChances.reduce((current, chance) => {\n        return current * (1 - chance);\n    }, 1);\n\n    for (let i = 0; i < cards.length; i++) {\n        let info = {};\n        let card = JSON.parse(JSON.stringify(cards[i]));\n        let cardType = card.type;\n        card.index = 6;\n        let bondNeeded = baseBondNeeded;\n        if (cardType == 6) {\n            bondNeeded += 55 - card.sb\n        } else {\n            bondNeeded += 75 - card.sb\n        }\n        let presentTypesWithCard = presentTypes.slice();\n        presentTypesWithCard[cardType] = true;\n\n        let typeCount = presentTypesWithCard.filter(Boolean).length;\n\n        // Add starting stats and stats from events\n        let score = card.sb;\n        let energyGain = 0;\n        let statGains = card.starting_stats.slice();\n        statGains.push(0);\n        \n        info.starting_stats = card.starting_stats.slice();\n        info.event_stats = [0,0,0,0,0,0,0];\n        \n        if (events[card.id]) {\n            info.event_stats = events[card.id].slice();\n            for (let stat = 0; stat < 6; stat++) {\n                statGains[stat] += events[card.id][stat] * card.effect_size_up;\n                info.event_stats[stat] = events[card.id][stat] * card.effect_size_up;\n            }\n            energyGain += events[card.id][6] * card.energy_up;\n            bondNeeded -= events[card.id][7];\n            score += events[card.id][7];\n        } else {\n            // Dummy event values for cards we don't yet know the events for\n            if (card.rarity === 2) {\n                // 35 total\n                for (let stat = 0; stat < 5; stat++) {\n                    statGains[stat] += 7;\n                }\n                bondNeeded -= 5;\n            } else if (card.rarity === 3) {\n                // 45 total\n                for (let stat = 0; stat < 5; stat++) {\n                    statGains[stat] += 9;\n                }\n                bondNeeded -= 5;\n            }\n            score += 5;\n        }\n\n        if (card.type_stats > 0) {\n            statGains[card.type] += card.type_stats;\n            for (let sc = 0; sc < selectedCards.length; sc++) {\n                if(selectedCards[sc].type < 6) {\n                    statGains[selectedCards[sc].type] += card.type_stats;\n                } else {\n                    statGains[0] += card.type_stats / 5;\n                    statGains[1] += card.type_stats / 5;\n                    statGains[2] += card.type_stats / 5;\n                    statGains[3] += card.type_stats / 5;\n                    statGains[4] += card.type_stats / 5;\n                }\n            }\n        }\n        \n        let trainingDays = 65 - weights.races[0] - weights.races[1] - weights.races[2];\n        if(cardType === 6) trainingDays -= 5;\n        let daysToBond = bondNeeded / weights.bondPerDay;\n        let rainbowDays = trainingDays - daysToBond;\n        let specialty = (100 + card.specialty_rate + weights.bonusSpec) * card.unique_specialty * card.fs_specialty;\n        let specialtyPercent = specialty / (450 + specialty);\n        let otherPercent = 100 / (450 + specialty);\n        let offstatAppearanceDenominator = card.offstat_appearance_denominator;\n        let daysPerTraining = [0,0,0,0,0];\n        let bondedDaysPerTraining = [0,0,0,0,0];\n        let rainbowTraining = 0;\n        \n        let rainbowOverride = 1;\n        if (cardType != 6) {\n            let chanceOfSingleRainbow = 0;\n            let cardsOfThisType = cardsPerType[cardType].slice();\n            card.rainbowSpecialty = specialtyPercent;\n            card.offSpecialty = otherPercent;\n            cardsOfThisType.push(card);\n            for (let j = 0; j < cardsOfThisType.length; j++) {\n                console.log(cardsOfThisType);\n                chanceOfSingleRainbow += CalculateCombinationChance([cardsOfThisType[j]], cardsOfThisType, cardType);\n            }\n            rainbowOverride = 1 - (chanceOfPreferredRainbow * chanceOfSingleRainbow);\n        }\n        \n        // Calculate appearance rates on each training\n        for (let stat = 0; stat < 5; stat++) {\n            if (stat == cardType) {\n                rainbowTraining = specialtyPercent * rainbowDays * rainbowOverride;\n                daysPerTraining[stat] = specialtyPercent * daysToBond;\n            } else {\n                daysPerTraining[stat] = otherPercent / offstatAppearanceDenominator * daysToBond;\n                bondedDaysPerTraining[stat] = otherPercent / offstatAppearanceDenominator * rainbowDays;\n            }\n        }\n\n        if (weights.onlySummer) {\n            rainbowTraining = 8 * specialtyPercent * rainbowOverride;\n        }\n\n        if (card.fs_ramp[0] > 0) {\n            let current_bonus = 0;\n            let total = 0;\n            for (let j = rainbowTraining * 0.66; j > 0; j--) {\n                total += current_bonus;\n                current_bonus = Math.min(current_bonus + card.fs_ramp[0], card.fs_ramp[1]);\n            }\n            card.unique_fs_bonus = 1 + total / rainbowTraining / 100;\n        }\n\n        // Stats from cross-training\n        info.non_rainbow_gains = [0,0,0,0,0,0,0];\n        for (let training = 0; training < 5; training ++) {\n            let gains = weights.unbondedTrainingGain[training];\n            let daysOnThisTraining = daysPerTraining[training];\n            energyGain += daysOnThisTraining * gains[6] * card.energy_discount;\n\n            let trainingGains = CalculateCrossTrainingGain(gains, weights, card, selectedCards, training, daysOnThisTraining, typeCount, false);\n            \n            for (let stat = 0; stat < 6; stat ++) {\n                statGains[stat] += trainingGains[stat];\n                info.non_rainbow_gains[stat] += trainingGains[stat];\n            }\n            info.non_rainbow_gains[6] += (daysOnThisTraining * gains[6] * card.energy_discount);\n        }\n\n        // Stats from cross-training while bonded\n        for (let training = 0; training < 5; training ++) {\n            let gains = weights.bondedTrainingGain[training];\n            let daysOnThisTraining = bondedDaysPerTraining[training];\n            energyGain += daysOnThisTraining * gains[6] * card.energy_discount;\n            energyGain += daysOnThisTraining * gains[6] * card.fs_energy;\n\n            let trainingGains = CalculateCrossTrainingGain(gains, weights, card, selectedCards, training, daysOnThisTraining, typeCount, true);\n            \n            for (let stat = 0; stat < 6; stat ++) {\n                statGains[stat] += trainingGains[stat];\n                info.non_rainbow_gains[stat] += trainingGains[stat];\n            }\n\n            info.non_rainbow_gains[6] += (daysOnThisTraining * gains[6] * card.energy_discount);\n            info.non_rainbow_gains[6] += (daysOnThisTraining * gains[6] * card.fs_energy);\n\n            if (training == 4 && card.group) {\n                energyGain += daysOnThisTraining * card.wisdom_recovery / 5;\n            }\n        }\n\n        info.rainbow_gains = [0,0,0,0,0,0,0];\n\n        // Stats from rainbows\n        if (cardType < 6) {\n            energyGain += rainbowTraining * card.wisdom_recovery;\n            let specialtyGains = weights.bondedTrainingGain[cardType];\n            if (weights.onlySummer) {\n                specialtyGains = weights.summerTrainingGain[cardType];\n            }\n            let trainingGains = CalculateTrainingGain(specialtyGains, weights, card, selectedCards, cardType, rainbowTraining, true, typeCount);\n\n            info.rainbow_gains = trainingGains.slice();\n            info.rainbow_gains.push(rainbowTraining * card.wisdom_recovery);\n\n            for (let stat = 0; stat < 6; stat ++) {\n                statGains[stat] += trainingGains[stat];\n            }\n        }\n\n        info.race_bonus_gains = 0;\n\n        // Race bonus\n        for (let raceType = 0; raceType < 4; raceType++) {\n            for (let stat = 0; stat < 6; stat ++) {\n                statGains[stat] += raceRewards[raceType][stat] * (card.race_bonus / 100) * weights.races[raceType];\n                info.race_bonus_gains += raceRewards[raceType][stat] * (card.race_bonus / 100) * weights.races[raceType];\n            }\n        }\n\n        // Convert stat gains to score\n        score += GainsToScore(statGains, weights);\n        score += energyGain * weights.stats[6];\n\n        if(weights.scenarioLink.indexOf(card.char_name) > -1) {\n            score += weights.scenarioBonus;\n        }\n\n        processedCards.push({\n            id: card.id,\n            lb: card.limit_break,\n            score: score,\n            info: info,\n            char_name: card.char_name\n        })\n    }\n\n    processedCards.sort((a, b) => b.score - a.score);\n    return processedCards;\n}\n\nfunction CalculateTrainingGain(gains, weights, card, otherCards, trainingType, days, rainbow, typeCount) {\n    let trainingGains = [0,0,0,0,0,0,0];\n\n    let trainingBonus = card.tb + card.fan_bonus * weights.fanBonus;\n    if (typeCount >= card.highlander_threshold) trainingBonus += card.highlander_training;\n    let fsBonus = 1;\n    let motivationBonus = card.mb;\n    if (rainbow) {\n        fsBonus = card.fs_bonus * card.unique_fs_bonus;\n        motivationBonus += card.fs_motivation;\n        trainingBonus += card.fs_training;\n    }\n\n    let soloGain = [0,0,0,0,0,0];\n    for (let stat = 0; stat < 6; stat ++) {\n        if (gains[stat] === 0) continue;\n\n        let base = gains[stat] + card.stat_bonus[stat];\n        if (rainbow) {\n            base += card.fs_stats[stat];\n        }\n        soloGain[stat] += (base \n            * trainingBonus\n            * (1 + weights.motivation * motivationBonus)\n            * fsBonus\n            * 1.05\n            * weights.umaBonus[stat]\n            - gains[stat]);\n    }\n    if (GainsToScore(soloGain, weights) > weights.minimum) {\n        for (let stat = 0; stat < 6; stat ++) {\n            trainingGains[stat] += soloGain[stat]\n                * days\n                * CalculateCombinationChance([], otherCards, trainingType)\n                * (rainbow ? weights.multi : 1);\n        }\n    }\n    \n    if (otherCards.length == 0) return trainingGains;\n\n    const combinations = GetCombinations(otherCards);\n\n    for (let i = 0; i < combinations.length; i++) {\n        let fullCombinationGains = [0,0,0,0,0,0];\n        let fullTotalGains = [0,0,0,0,0,0];\n        trainingBonus += (combinations[i].length + 1) * card.crowd_bonus;\n\n        const combinationTrainingBonus = combinations[i].reduce((current, c) => {\n            let training = current + (c.tb - 1) + (combinations[i].length * c.crowd_bonus);\n            if (typeCount >= c.highlander_threshold)\n                training += c.highlander_training;\n            return training;\n        }, 1);\n        const combinationFriendshipBonus = combinations[i].reduce((current, c) => {\n            if (c.cardType === trainingType) {\n                return current * c.fs_bonus * c.unique_fs_bonus;\n            } else {\n                return current;\n            }\n        }, 1);\n        const combinationMotivationBonus = combinations[i].reduce((current, c) => current + c.mb - 1, 1);\n        \n        for (let stat = 0; stat < 6; stat ++) {\n            if (gains[stat] === 0) continue;\n            \n            const combinationStatBonus = combinations[i].reduce((current, c) => current + c.stat_bonus[stat], 0);\n            let base = gains[stat] + combinationStatBonus;\n            if (rainbow) {\n                base += card.fs_stats[stat];\n            }\n\n            let combinationGains = (base \n                * combinationTrainingBonus\n                * (1 + weights.motivation * combinationMotivationBonus)\n                * combinationFriendshipBonus\n                * (1.05 * combinations[i].length)\n                * weights.umaBonus[stat]);\n                \n            let totalGains = ((base + card.stat_bonus[stat])\n                * (combinationTrainingBonus + trainingBonus - 1)\n                * (1 + weights.motivation * (combinationMotivationBonus + motivationBonus - 1))\n                * (combinationFriendshipBonus * fsBonus)\n                * (1.05 * (combinations[i].length + 1))\n                * weights.umaBonus[stat]);\n            \n            fullCombinationGains[stat] += combinationGains;\n            fullTotalGains[stat] += totalGains;\n        }\n        trainingBonus -= (combinations[i].length + 1) * card.crowd_bonus;\n        if (GainsToScore(fullTotalGains, weights) > weights.minimum) {\n            for (let stat = 0; stat < 6; stat ++) {\n                trainingGains[stat] += (fullTotalGains[stat] - fullCombinationGains[stat]) \n                    * days\n                    * CalculateCombinationChance(combinations[i], otherCards, trainingType)\n                    * (rainbow ? weights.multi : 1);\n            }\n        }\n    }\n\n    return trainingGains;\n}\n\nfunction CalculateCrossTrainingGain(gains, weights, card, otherCards, trainingType, days, typeCount, bonded) {\n    let trainingGains = [0,0,0,0,0,0,0];\n    let statCards = otherCards.filter((c) => c.cardType === trainingType);\n    let trainingBonus = card.tb + card.fan_bonus * weights.fanBonus;\n    if (typeCount >= card.highlander_threshold) trainingBonus += card.highlander_training;\n    let fsBonus = 1;\n    if (card.group && bonded) {\n        fsBonus += (card.fs_bonus + card.unique_fs_bonus - 1) / 5;\n    }\n    const combinations = GetCombinations(otherCards);\n\n    for (let i = 0; i < combinations.length; i++) {\n        const combination = combinations[i];\n        let fullCombinationGains = [0,0,0,0,0,0];\n        let fullTotalGains = [0,0,0,0,0,0];\n        trainingBonus += (combination.length + 1) * card.crowd_bonus;\n\n        const combinationTrainingBonus = combination.reduce((current, c) => {\n            let training = current + (c.tb - 1) + (combination.length * c.crowd_bonus);\n            if (typeCount >= c.highlander_threshold)\n                training += c.highlander_training;\n            return training;\n        }, 1);\n        const combinationFriendshipBonus = combination.reduce((current, c) => {\n            if (c.cardType === trainingType) {\n                return current * c.fs_bonus * c.unique_fs_bonus;\n            } else {\n                return current;\n            }\n        }, 1);\n        const combinationMotivationBonus = combination.reduce((current, c) => current + c.mb - 1, 1);\n        \n        for (let stat = 0; stat < 6; stat ++) {\n            if (gains[stat] === 0) continue;\n            if(!combination.some((r) => statCards.indexOf(r) > -1)) continue;\n            \n            const combinationStatBonus = combination.reduce((current, c) => current + c.stat_bonus[stat], 0);\n            const base = gains[stat] + combinationStatBonus;\n\n            let combinationGains = (base \n                * combinationTrainingBonus\n                * (1 + weights.motivation * combinationMotivationBonus)\n                * combinationFriendshipBonus\n                * (1.05 * combination.length)\n                * weights.umaBonus[stat]);\n            \n            let totalGains = 0;\n            if (bonded) {\n                totalGains = ((base + card.stat_bonus[stat] + card.fs_stats[stat])\n                    * (combinationTrainingBonus + trainingBonus + card.fs_training - 1)\n                    * (1 + weights.motivation * (combinationMotivationBonus + card.mb + card.fs_motivation - 1))\n                    * (combinationFriendshipBonus * fsBonus)\n                    * (1.05 * (combination.length + 1))\n                    * weights.umaBonus[stat]);\n            } else {\n                totalGains = ((base + card.stat_bonus[stat])\n                    * (combinationTrainingBonus + trainingBonus - 1)\n                    * (1 + weights.motivation * (combinationMotivationBonus + card.mb - 1))\n                    * (1.05 * (combination.length + 1))\n                    * weights.umaBonus[stat]);\n            }\n            \n            fullCombinationGains[stat] += combinationGains;\n            fullTotalGains[stat] += totalGains;\n        }\n        trainingBonus -= (combination.length + 1) * card.crowd_bonus;\n        if (GainsToScore(fullTotalGains, weights) > weights.minimum) {\n            for (let stat = 0; stat < 6; stat ++) {\n                trainingGains[stat] += (fullTotalGains[stat] - fullCombinationGains[stat]) \n                    * days\n                    * CalculateCombinationChance(combinations[i], otherCards, trainingType)\n                    * weights.multi;\n            }\n        }\n    }\n\n    return trainingGains;\n}\n\nfunction GainsToScore(gains, weights) {\n    let score = 0;\n    for (let stat = 0; stat < 6; stat ++) {\n        score += Math.min(gains[stat], weights.cap) * weights.stats[stat];\n    }\n    return score;\n}\n\nfunction GetCombinations(cards, minLength = 1) {\n    let combinations = [];\n    let temp = [];\n    const count = Math.pow(2, cards.length);\n\n    for (let i = 0; i < count; i++){\n        temp = [];\n        for (let j = 0; j<cards.length; j++) {\n            if (i & Math.pow(2,j)) { \n                temp.push(cards[j]);\n            }\n        }\n        if (temp.length >= minLength) {\n            combinations.push(temp);\n        }\n    }\n\n    return combinations;\n}\n\nfunction CalculateCombinationChance(combination, cards, trainingType) {\n    let chance = combination.reduce((current, card) => {\n        if (card.cardType === trainingType) {\n            return current * card.rainbowSpecialty;\n        } else {\n            return current * card.offSpecialty;\n        }\n    }, 1);\n    \n    if (cards) {\n        const otherCards = cards.filter((c) => combination.findIndex((d) => c.index == d.index) === -1);\n        chance = otherCards.reduce((current, card) => {\n            if (card.cardType === trainingType) {\n                return current * (1 - card.rainbowSpecialty);\n            } else {\n                return current * (1 - card.offSpecialty);\n            }\n        }, chance);\n    }\n\n    return chance;\n}\n\nexport default TierList;\n"]},"metadata":{},"sourceType":"module"}