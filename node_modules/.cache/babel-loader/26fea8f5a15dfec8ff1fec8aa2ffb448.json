{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Chun\\\\GakuTest\\\\src\\\\components\\\\TierList.js\";\nimport React from 'react';\nimport SupportCard from './SupportCard';\nimport { supportCardProperties } from '../constants';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ordinal = [\"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"7th\"];\nconst type_names = [\"Voice\", \"Dance\", \"Visual\"];\n\nclass TierList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropdownSelections: [\"none\", \"none\", \"none\"]\n    };\n    this.onDropdown1Changed = this.onDropdown1Changed.bind(this);\n    this.onDropdown2Changed = this.onDropdown2Changed.bind(this);\n    this.onDropdown3Changed = this.onDropdown3Changed.bind(this);\n    this.onToggleResults = this.onToggleResults.bind(this);\n  } //lmao\n\n\n  onDropdown1Changed(newValue) {\n    let newSelections = this.state.dropdownSelections.slice();\n    newSelections[0] = newValue.value;\n    console.log(newValue);\n    this.setState({\n      dropdownSelections: newSelections\n    });\n  }\n\n  onDropdown2Changed(newValue) {\n    let newSelections = this.state.dropdownSelections.slice();\n    newSelections[1] = newValue.value;\n    this.setState({\n      dropdownSelections: newSelections\n    });\n  }\n\n  onDropdown3Changed(newValue) {\n    let newSelections = this.state.dropdownSelections.slice();\n    newSelections[2] = newValue.value;\n    this.setState({\n      dropdownSelections: newSelections\n    });\n  }\n\n  onToggleResults(event) {\n    this.setState({\n      show: !this.state.show\n    });\n  }\n\n  render() {\n    let cards = this.props.cards;\n    let selectedNames = this.props.selectedCards.map(card => card.char_name);\n    let processedCardsAll = processCards(cards, this.props.weights, this.props.selectedCards);\n\n    if (this.props.weights.type > -1) {\n      cards = cards.filter(e => e.type === this.props.weights.type);\n    }\n\n    let processedCards = processCards(cards, this.props.weights, this.props.selectedCards);\n\n    if (processedCards.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tier-list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 20\n      }, this);\n    }\n\n    let rows = [[]];\n    let current_row = 0;\n    let step = (processedCards[0].score - processedCards[processedCards.length - 1].score) / 7;\n    let boundary = processedCards[0].score - step;\n\n    for (let i = 0; i < processedCards.length; i++) {\n      while (processedCards[i].score < boundary - 1) {\n        rows.push([]);\n        current_row++;\n        boundary -= step;\n      }\n\n      rows[current_row].push( /*#__PURE__*/_jsxDEV(SupportCard, {\n        id: processedCards[i].id,\n        lb: processedCards[i].lb,\n        score: processedCards[i].score,\n        info: processedCards[i].info,\n        charName: processedCards[i].char_name,\n        selected: selectedNames,\n        card: cards.find(c => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb),\n        onClick: () => this.props.cardSelected(cards.find(c => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb)),\n        stats: this.state.dropdownSelections\n      }, processedCards[i].id + \"LB\" + processedCards[i].lb, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this));\n    }\n\n    let resultValues = processScores(processedCardsAll, this.props.weights, this.props.selectedCards);\n    let tiers = [];\n\n    for (let i = 0; i < 7; i++) {\n      tiers.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tier\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tier-letter\",\n          children: tierNames[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tier-images\",\n          children: rows[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)]\n      }, tierNames[i], true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this));\n    }\n\n    let count = this.props.selectedCards.filter(c => c.type == this.props.weights.type).length;\n    let dropdownOptions = [{\n      value: \"none\",\n      label: \"None\"\n    }];\n    let properties = Object.keys(supportCardProperties).sort();\n\n    for (let i = 0; i < properties.length; i++) {\n      dropdownOptions.push({\n        value: properties[i],\n        label: supportCardProperties[properties[i]].friendly_name\n      });\n    }\n\n    let results = [];\n\n    for (let i = 0; i < 1; i++) {\n      results.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weights\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weight-row\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"results-toggle\",\n            type: \"button\",\n            onClick: this.onToggleResults,\n            children: this.state.show ? \"Hide Results\" : \"Show Results\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this), !this.state.show && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"section-explanation\",\n              children: resultValues[0].startingStats\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"section-explanation\",\n              children: resultValues[0].startingMult\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 29\n          }, this)\n        }, void 0, false)]\n      }, resultValues[0].finalScore[0], true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tier-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-explanation\",\n        children: results\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selectors\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"selectLabel\",\n          children: \"Show Stats:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          className: \"select\",\n          options: dropdownOptions,\n          onChange: this.onDropdown1Changed,\n          defaultValue: {\n            value: \"none\",\n            label: \"None\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          className: \"select\",\n          options: dropdownOptions,\n          onChange: this.onDropdown2Changed,\n          defaultValue: {\n            value: \"none\",\n            label: \"None\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          className: \"select\",\n          options: dropdownOptions,\n          onChange: this.onDropdown3Changed,\n          defaultValue: {\n            value: \"none\",\n            label: \"None\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), tiers]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst tierNames = ['S', 'A', 'B', 'C', 'D', 'E', 'F'];\n\nfunction processCards(cards, weights, selectedCards) {\n  let processedCards = [];\n  selectedCards = selectedCards.slice(); // Calculate some stuff here so we don't have to do it a million times later\n\n  for (let card = 0; card < selectedCards.length; card++) {\n    let selectedCard = selectedCards[card];\n    selectedCard.index = card;\n  }\n\n  for (let i = 0; i < cards.length; i++) {\n    let info = {};\n    let card = JSON.parse(JSON.stringify(cards[i]));\n    card.index = 6; // Add starting stats and stats from events\n\n    let score = 0;\n    let statGains = card.start_b;\n    info.type = card.type;\n    info.start_b = card.start_b;\n    info.pb = card.pb;\n    info.spRate = card.sp_r;\n    info.spp = card.spp;\n    info.pb = card.pb;\n\n    if (card.type === 0) {\n      statGains += card.lb * weights.vocalLessons[1];\n    } else if (card.type === 1) {\n      statGains += card.lb * weights.danceLessons[1];\n    } else {\n      statGains += card.lb * weights.visualLessons[1];\n    }\n\n    if (card.type === 0) {\n      statGains += card.sp_lb * weights.vocalLessons[2];\n    } else if (card.type === 1) {\n      statGains += card.sp_lb * weights.danceLessons[2];\n    } else {\n      statGains += card.sp_lb * weights.visualLessons[2];\n    }\n\n    statGains += card.rest_b * weights.rest;\n    statGains += card.gb * weights.gift;\n    statGains += card.db * weights.date;\n    statGains += card.sb * weights.shop;\n    statGains += card.cb * weights.classroom;\n    statGains += card.pdb * weights.drink;\n    statGains += card.mb;\n    statGains += card.ub * weights.upgrade.reduce((total, current) => total + current, 0);\n    statGains += card.m_ub * weights.upgrade[1];\n    statGains += card.a_cb * weights.cardAcq[0];\n    statGains += card.m_cb * weights.cardAcq[1];\n    statGains += card.con_cb * weights.cardAcq[2];\n    statGains += card.remove_b * weights.removal; // Convert stat gains to score\n\n    score += statGains;\n    processedCards.push({\n      id: card.id,\n      lb: card.limit_break,\n      score: score,\n      info: info,\n      char_name: card.char_name\n    });\n  }\n\n  processedCards.sort((a, b) => b.score - a.score);\n  return processedCards;\n}\n\nfunction processScores(processedCards, weights, selectedCards) {\n  selectedCards = selectedCards.slice();\n  let startingStats = [0, 0, 0];\n  startingStats = startingStats.map((stat, index) => stat + weights.idolStats[index] + weights.memStats[index]);\n  let startingMult = [0, 0, 0];\n  startingMult = startingStats.map((stat, index) => stat + weights.idolMult[index] + weights.memMult[index]);\n  let statBonus = [0, 0, 0];\n  let spRate = weights.spRate;\n\n  for (let card = 0; card < selectedCards.length; card++) {\n    let cardID = selectedCards[card].id;\n    let cardLB = selectedCards[card].limit_break;\n    let type = selectedCards[card].type;\n    let matchingCards = processedCards.find(processedCards => processedCards.id === cardID && processedCards.lb === cardLB);\n    startingStats[type] += matchingCards.info.start_b;\n    startingMult[type] += matchingCards.info.pb;\n    spRate += matchingCards.info.spRate;\n    statBonus[type] += matchingCards.score;\n  }\n\n  let lessonGain = [weights.vocalLessons[0], weights.danceLessons[0], weights.visualLessons[0]];\n  let finalScore = startingStats.map((stat, index) => stat + startingStats[index] + statBonus[index] + lessonGain[index]);\n  let results = [{\n    startingStats: startingStats,\n    startingMult: startingMult,\n    spRate: spRate,\n    statBonus: statBonus,\n    finalScore: finalScore\n  }];\n  return results;\n}\n\nexport default TierList;","map":{"version":3,"sources":["C:/Users/Chun/GakuTest/src/components/TierList.js"],"names":["React","SupportCard","supportCardProperties","Select","ordinal","type_names","TierList","Component","constructor","props","state","dropdownSelections","onDropdown1Changed","bind","onDropdown2Changed","onDropdown3Changed","onToggleResults","newValue","newSelections","slice","value","console","log","setState","event","show","render","cards","selectedNames","selectedCards","map","card","char_name","processedCardsAll","processCards","weights","type","filter","e","processedCards","length","rows","current_row","step","score","boundary","i","push","id","lb","info","find","c","limit_break","cardSelected","resultValues","processScores","tiers","tierNames","count","dropdownOptions","label","properties","Object","keys","sort","friendly_name","results","startingStats","startingMult","finalScore","selectedCard","index","JSON","parse","stringify","statGains","start_b","pb","spRate","sp_r","spp","vocalLessons","danceLessons","visualLessons","sp_lb","rest_b","rest","gb","gift","db","date","sb","shop","cb","classroom","pdb","drink","mb","ub","upgrade","reduce","total","current","m_ub","a_cb","cardAcq","m_cb","con_cb","remove_b","removal","a","b","stat","idolStats","memStats","idolMult","memMult","statBonus","cardID","cardLB","matchingCards","lessonGain"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SupportCard from './SupportCard';\nimport { supportCardProperties } from '../constants';\nimport Select from 'react-select';\n\nconst ordinal = [\"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"7th\"];\nconst type_names = [\"Voice\", \"Dance\", \"Visual\"];\n\nclass TierList extends React.Component {\n    constructor (props) {\n        super(props);\n\n        this.state = {\n            dropdownSelections: [\"none\",\"none\",\"none\"]\n        }\n\n        this.onDropdown1Changed = this.onDropdown1Changed.bind(this);\n        this.onDropdown2Changed = this.onDropdown2Changed.bind(this);\n        this.onDropdown3Changed = this.onDropdown3Changed.bind(this);\n        this.onToggleResults = this.onToggleResults.bind(this);\n    }\n\n    //lmao\n    onDropdown1Changed(newValue) {\n        let newSelections = this.state.dropdownSelections.slice();\n        newSelections[0] = newValue.value;\n        console.log(newValue);\n        this.setState({dropdownSelections:newSelections});\n    }\n    onDropdown2Changed(newValue) {\n        let newSelections = this.state.dropdownSelections.slice();\n        newSelections[1] = newValue.value;\n        this.setState({dropdownSelections:newSelections});\n    }\n    onDropdown3Changed(newValue) {\n        let newSelections = this.state.dropdownSelections.slice();\n        newSelections[2] = newValue.value;\n        this.setState({dropdownSelections:newSelections});\n    }\n\n    onToggleResults(event) {\n        this.setState({ show: !this.state.show });\n    }\n\n    render() {\n        let cards = this.props.cards;\n        let selectedNames = this.props.selectedCards.map(card => card.char_name);\n\n        let processedCardsAll = processCards(cards, this.props.weights, this.props.selectedCards);\n\n        if (this.props.weights.type > -1) {\n            cards = cards.filter(e => e.type === this.props.weights.type);\n        }\n\n        let processedCards = processCards(cards, this.props.weights, this.props.selectedCards);\n\n        if (processedCards.length === 0) {\n            return <div className=\"tier-list\"></div>;\n        }\n\n        let rows = [[]];\n        let current_row = 0;\n        let step = (processedCards[0].score - processedCards[processedCards.length - 1].score) / 7;\n        let boundary = processedCards[0].score - step;\n\n        for (let i = 0; i < processedCards.length; i++) {\n            while (processedCards[i].score < boundary - 1) {\n                rows.push([]);\n                current_row++;\n                boundary -= step;\n            }\n\n            rows[current_row].push((\n                <SupportCard\n                    id={processedCards[i].id}\n                    lb={processedCards[i].lb}\n                    score={processedCards[i].score}\n                    key={processedCards[i].id + \"LB\" + processedCards[i].lb}\n                    info={processedCards[i].info}\n                    charName={processedCards[i].char_name}\n                    selected={selectedNames}\n                    card={cards.find((c) => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb)}\n                    onClick={() => this.props.cardSelected(cards.find((c) => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb))}\n                    stats={this.state.dropdownSelections}\n                />\n            ));\n        }\n\n        let resultValues = processScores(processedCardsAll, this.props.weights, this.props.selectedCards);\n\n        let tiers = [];\n\n        for (let i = 0; i < 7; i++) {\n            tiers.push(\n                <div className=\"tier\" key={tierNames[i]}>\n                    <div className=\"tier-letter\">{tierNames[i]}</div>\n                    <div className=\"tier-images\">{rows[i]}</div>\n                </div>\n            )\n        }\n\n        let count = this.props.selectedCards.filter((c) => c.type == this.props.weights.type).length;\n        let dropdownOptions = [{ value: \"none\", label: \"None\" }];\n        let properties = Object.keys(supportCardProperties).sort();\n        for (let i = 0; i < properties.length; i++) {\n            dropdownOptions.push({\n                value: properties[i],\n                label: supportCardProperties[properties[i]].friendly_name\n            });\n        }\n\n        let results = [];\n\n\n        for (let i = 0; i < 1; i++) {\n            results.push(\r\n                <div className=\"weights\" key={resultValues[0].finalScore[0]}>\n                    <div className=\"weight-row\">\n                        <button id=\"results-toggle\" type=\"button\" onClick={this.onToggleResults}>{this.state.show ? \"Hide Results\" : \"Show Results\"}</button>\n                    </div>\n                    {\n                        !this.state.show &&\n                        <>\n                            <div>\n                                <div className=\"section-explanation\">{resultValues[0].startingStats}</div>\n                                <div className=\"section-explanation\">{resultValues[0].startingMult}</div>\n                            </div>\r\n                        </>\r\n                    }\r\n                </div>\r\n            );\r\n        }\n\n\n\n        return (\n            <div className=\"tier-list\">\n                <div className=\"section-explanation\">\n                    {results}\n                </div>\n                <div className=\"selectors\">\n                    <span className=\"selectLabel\">Show Stats:</span>\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown1Changed} defaultValue={{ value: \"none\", label: \"None\" }} />\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown2Changed} defaultValue={{ value: \"none\", label: \"None\" }} />\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown3Changed} defaultValue={{ value: \"none\", label: \"None\" }} />\n                </div>\n                {tiers}\n            </div>\n        );\n    }\n    \n}\n\nconst tierNames = ['S', 'A', 'B', 'C', 'D', 'E', 'F']\nfunction processCards(cards, weights, selectedCards) {\n    let processedCards = [];\n    selectedCards = selectedCards.slice();\n    \n    // Calculate some stuff here so we don't have to do it a million times later\n    for (let card = 0; card < selectedCards.length; card++) {\n        let selectedCard = selectedCards[card];\n        selectedCard.index = card;\n    }\n\n    for (let i = 0; i < cards.length; i++) {\n        let info = {};\n        let card = JSON.parse(JSON.stringify(cards[i]));\n        card.index = 6;\n\n        // Add starting stats and stats from events\n        let score = 0;\n        let statGains = card.start_b;\n\n        info.type = card.type;\n        info.start_b = card.start_b;\n        info.pb = card.pb;\n        info.spRate = card.sp_r;\n        info.spp = card.spp;\n        info.pb = card.pb;\n\n        if (card.type === 0) {\n            statGains += card.lb * weights.vocalLessons[1];\n        } else if (card.type === 1) {\n            statGains += card.lb * weights.danceLessons[1];\r\n        } else {\n            statGains += card.lb * weights.visualLessons[1];\r\n        }\n\n        if (card.type === 0) {\n            statGains += card.sp_lb * weights.vocalLessons[2];\n        } else if (card.type === 1) {\n            statGains += card.sp_lb * weights.danceLessons[2];\r\n        } else {\n            statGains += card.sp_lb * weights.visualLessons[2];\r\n        }\n\n        statGains += card.rest_b * weights.rest;\n        statGains += card.gb * weights.gift;\n        statGains += card.db * weights.date;\n        statGains += card.sb * weights.shop;\n        statGains += card.cb * weights.classroom;\n        statGains += card.pdb * weights.drink;\n        statGains += card.mb;\n        \n        statGains += card.ub * weights.upgrade.reduce((total, current) => total + current, 0);\n        statGains += card.m_ub * weights.upgrade[1];\n\n        statGains += card.a_cb * weights.cardAcq[0];\n        statGains += card.m_cb * weights.cardAcq[1];\n        statGains += card.con_cb * weights.cardAcq[2];\n\n        statGains += card.remove_b * weights.removal;\n\n        // Convert stat gains to score\n        score += statGains;\n\n        processedCards.push({\n            id: card.id,\n            lb: card.limit_break,\n            score: score,\n            info: info,\n            char_name: card.char_name\n        })\n    }\n    processedCards.sort((a, b) => b.score - a.score);\n    return processedCards;\n}\n\nfunction processScores(processedCards, weights, selectedCards) {\r\n    selectedCards = selectedCards.slice();\r\n    let startingStats = [0, 0, 0];\r\n    startingStats = startingStats.map((stat, index) => stat + weights.idolStats[index] + weights.memStats[index]);\r\n\r\n    let startingMult = [0, 0, 0];\r\n    startingMult = startingStats.map((stat, index) => stat + weights.idolMult[index] + weights.memMult[index]);\r\n\r\n    let statBonus = [0, 0, 0];\r\n    let spRate = weights.spRate;\r\n    for (let card = 0; card < selectedCards.length; card++) {\r\n        let cardID = selectedCards[card].id;\r\n        let cardLB = selectedCards[card].limit_break\r\n        let type = selectedCards[card].type\r\n        let matchingCards = processedCards.find(processedCards => processedCards.id === cardID && processedCards.lb === cardLB);\r\n\r\n        startingStats[type] += matchingCards.info.start_b;\r\n        startingMult[type] += matchingCards.info.pb;\r\n\r\n        spRate += matchingCards.info.spRate;\r\n\r\n        statBonus[type] += matchingCards.score;\r\n    }\r\n    let lessonGain = [weights.vocalLessons[0], weights.danceLessons[0], weights.visualLessons[0]]\r\n    let finalScore = startingStats.map((stat, index) => stat + startingStats[index] + statBonus[index] + lessonGain[index]);\r\n\r\n    let results = [{\r\n        startingStats: startingStats,\r\n        startingMult: startingMult,\r\n        spRate: spRate,\r\n        statBonus: statBonus,\r\n        finalScore: finalScore,\r\n    }]\r\n    \r\n    return results;\r\n    }\r\n   \n\nexport default TierList;"]},"metadata":{},"sourceType":"module"}